"use strict";
exports.id = "component---packages-gatsby-theme-newrelic-src-pages-404-js";
exports.ids = ["component---packages-gatsby-theme-newrelic-src-pages-404-js"];
exports.modules = {

/***/ "../packages/gatsby-theme-newrelic/src/pages/404.js":
/*!**********************************************************!*\
  !*** ../packages/gatsby-theme-newrelic/src/pages/404.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _demo_public_page_data_sq_d_1271460761_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../demo/public/page-data/sq/d/1271460761.json */ "./public/page-data/sq/d/1271460761.json");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "../node_modules/react/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! prop-types */ "../node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var gatsby_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gatsby-link */ "../node_modules/gatsby-link/index.js");
/* harmony import */ var _components_GlobalHeader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/GlobalHeader */ "../packages/gatsby-theme-newrelic/src/components/GlobalHeader.js");
/* harmony import */ var _components_GlobalFooter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/GlobalFooter */ "../packages/gatsby-theme-newrelic/src/components/GlobalFooter.js");
/* harmony import */ var _components_Link__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/Link */ "../packages/gatsby-theme-newrelic/src/components/Link.js");
/* harmony import */ var _components_SearchInput__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/SearchInput */ "../packages/gatsby-theme-newrelic/src/components/SearchInput.js");
/* harmony import */ var _components_Tag__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/Tag */ "../packages/gatsby-theme-newrelic/src/components/Tag.js");
/* harmony import */ var _components_CreateIssueButton__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../components/CreateIssueButton */ "../packages/gatsby-theme-newrelic/src/components/CreateIssueButton.js");
/* harmony import */ var _components_Button__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../components/Button */ "../packages/gatsby-theme-newrelic/src/components/Button.js");
/* harmony import */ var _gatsby_utils_getLocale__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../gatsby/utils/getLocale */ "../packages/gatsby-theme-newrelic/gatsby/utils/getLocale.js");
/* harmony import */ var _gatsby_utils_getLocale__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_gatsby_utils_getLocale__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _hooks_useThemeTranslation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../hooks/useThemeTranslation */ "../packages/gatsby-theme-newrelic/src/hooks/useThemeTranslation.js");
/* harmony import */ var _components_Trans__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../components/Trans */ "../packages/gatsby-theme-newrelic/src/components/Trans.js");
/* harmony import */ var _hooks_useTessen__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../hooks/useTessen */ "../packages/gatsby-theme-newrelic/src/hooks/useTessen.js");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @emotion/react */ "../node_modules/@emotion/react/dist/emotion-react.esm.js");
/* provided dependency */ var fetch = __webpack_require__(/*! ../node_modules/node-fetch/lib/index.js */ "../node_modules/node-fetch/lib/index.js");
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }



















var _ref =  false ? 0 : {
  name: "fmd3wx-NotFoundPage",
  styles: "grid-area:footer;align-self:end;label:NotFoundPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref2 =  false ? 0 : {
  name: "zbkxy1-NotFoundPage",
  styles: "margin-left:1em;label:NotFoundPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref3 =  false ? 0 : {
  name: "v0zdya-NotFoundPage",
  styles: ">*{margin:3em 0;};label:NotFoundPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 =  false ? 0 : {
  name: "1rs7e69-NotFoundPage",
  styles: "min-width:200px;max-width:2000px;margin-top:0.5rem;margin-bottom:0.5rem;label:NotFoundPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 =  false ? 0 : {
  name: "1aidf8n-NotFoundPage",
  styles: "margin-top:2rem;margin-bottom:2rem;label:NotFoundPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref6 =  false ? 0 : {
  name: "rr6evj-NotFoundPage",
  styles: "font-weight:normal;line-height:1;label:NotFoundPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref7 =  false ? 0 : {
  name: "1yxiwys-NotFoundPage",
  styles: "font-size:0.85rem;padding:8rem 0;label:NotFoundPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref8 =  false ? 0 : {
  name: "sonv4b-NotFoundPage",
  styles: "display:flex;grid-area:content;justify-self:start;label:NotFoundPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref9 =  false ? 0 : {
  name: "acnec8-NotFoundPage",
  styles: "display:grid;grid-template-columns:1fr 1fr 1fr 1fr;grid-template-rows:auto;grid-template-areas:'. . . .' '. content content .' 'footer footer footer footer';min-height:calc(100vh - var(--global-header-height));max-height:calc(100vh - var(--global-header-height));label:NotFoundPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref10 =  false ? 0 : {
  name: "17t4dbt-displaySearchResults",
  styles: "font-size:0.625rem;margin-right:0.5em;label:displaySearchResults;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref11 =  false ? 0 : {
  name: "13owa2s-displaySearchResults",
  styles: "text-decoration:none;label:displaySearchResults;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref12 =  false ? 0 : {
  name: "2zt0jw-displaySearchResults",
  styles: "list-style-type:none;margin:0;padding:0;line-height:1.75rem;margin-top:1rem;label:displaySearchResults;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

const NotFoundPage = ({
  location,
  pageContext: {
    themeOptions,
    swiftypeEngineKey
  }
}) => {
  const {
    site: {
      siteMetadata: {
        siteUrl
      }
    }
  } = _demo_public_page_data_sq_d_1271460761_json__WEBPACK_IMPORTED_MODULE_0__.data;
  const {
    t: translate
  } = (0,_hooks_useThemeTranslation__WEBPACK_IMPORTED_MODULE_11__["default"])();
  const {
    0: searchTerm,
    1: setSearchTerm
  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);
  const {
    0: searchResult,
    1: setSearchResult
  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);
  const tessen = (0,_hooks_useTessen__WEBPACK_IMPORTED_MODULE_13__["default"])();
  const pageLocale = _gatsby_utils_getLocale__WEBPACK_IMPORTED_MODULE_10___default()({
    location
  }, themeOptions);
  const hostname = new URL(siteUrl).hostname;
  const nrSubDomain = /.*\.newrelic\.com/.test(hostname) ? hostname.split('.')[0] : null;
  const searchTermFilter = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(term => {
    const termsToIgnore = ['docs', pageLocale];

    if (!term || termsToIgnore.includes(term)) {
      return false;
    }

    return true;
  }, [pageLocale]);
  const getSearchResults = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async () => {
    const localePostFix = () => {
      return pageLocale === 'en' ? '' : `-${pageLocale}`;
    };

    const search = async () => {
      const res = await fetch('https://search-api.swiftype.com/api/v1/public/engines/search.json', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          q: searchTerm,
          engine_key: swiftypeEngineKey,
          per_page: 5,
          filters: {
            page: {
              type: [`docs${localePostFix()}`, `developers${localePostFix()}`, `opensource${localePostFix()}`, `quickstarts${localePostFix()}`],
              document_type: ['!views_page_menu', '!term_page_api_menu', '!term_page_landing_page']
            }
          }
        })
      });
      const {
        records
      } = await res.json();
      return records.page;
    };

    if (searchTerm !== null) {
      const results = await search();
      const trimmedResults = results.map(r => {
        return {
          url: r.url,
          title: r.title,
          type: r.type
        };
      });
      setSearchResult(trimmedResults);
    }
  }, [pageLocale, searchTerm, swiftypeEngineKey]);

  const displaySearchResults = locale => {
    if (!searchResult || searchResult.length === 0) {
      return null;
    }

    return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)("div", {
      id: "search-results"
    }, translate('404.searchResultMessage'), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)("ul", {
      css: _ref12
    }, searchResult.map((result, index) => {
      var _result$type;

      return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)("li", {
        key: `result-${index}`
      }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)("div", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)(_components_Link__WEBPACK_IMPORTED_MODULE_5__["default"], {
        to: result.url,
        css: _ref11,
        instrumentation: {
          component: '404SuggestedLink',
          href: result.url,
          searchTerm
        },
        displayExternalIcon: true
      }, result.title)), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)(_components_Tag__WEBPACK_IMPORTED_MODULE_7__["default"], {
        css: _ref10,
        uppercase: true
      }, (_result$type = result.type) === null || _result$type === void 0 ? void 0 : _result$type.replace(`-${locale}`, '').replace('_', ' ')));
    })));
  };

  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    setSearchTerm(location.pathname.split('/').filter(searchTermFilter).join(' '));
  }, [searchTermFilter, location.pathname]);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    getSearchResults();
  }, [getSearchResults, searchTerm]);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (searchResult) {
      tessen.track({
        eventName: 'error404',
        category: 'ErrorPage',
        path: location.pathname,
        resultCount: searchResult.length,
        searchTerm
      });
    }
  }, [location.pathname, searchResult, searchTerm]);
  return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)(_components_GlobalHeader__WEBPACK_IMPORTED_MODULE_3__["default"], null), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)("div", {
    css: _ref9
  }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)("div", {
    css: _ref8
  }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)("div", {
    css: _ref7
  }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)("h1", {
    css: _ref6
  }, translate('404.headingText')), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)("div", {
    id: "search-section",
    css: _ref5
  }, translate('404.searchInputLabel'), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)(_components_SearchInput__WEBPACK_IMPORTED_MODULE_6__["default"], {
    placeholder: searchTerm,
    onFocus: () => (0,gatsby_link__WEBPACK_IMPORTED_MODULE_2__.navigate)(`?q=${searchTerm.replaceAll(' ', '+')}`),
    css: _ref4
  })), displaySearchResults(pageLocale), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)("div", {
    css: _ref3
  }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)(_components_Trans__WEBPACK_IMPORTED_MODULE_12__["default"], {
    i18nKey: "404.docsHomeMessage",
    parent: "p"
  }, "Go back to ", (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)(_components_Link__WEBPACK_IMPORTED_MODULE_5__["default"], {
    to: "/"
  }, {
    nrSubDomain
  }, " home"), "."), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)("p", null, translate('404.fileIssueMessage'), ' ', (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)(_components_CreateIssueButton__WEBPACK_IMPORTED_MODULE_8__["default"], {
    pageTitle: "404",
    variant: _components_Button__WEBPACK_IMPORTED_MODULE_9__["default"].VARIANT.OUTLINE,
    size: _components_Button__WEBPACK_IMPORTED_MODULE_9__["default"].SIZE.SMALL,
    labels: ['bug', '404'],
    instrumentation: {
      component: '404Page'
    },
    css: _ref2
  }))))), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_14__.jsx)(_components_GlobalFooter__WEBPACK_IMPORTED_MODULE_4__["default"], {
    css: _ref
  })));
};

NotFoundPage.propTypes = {
  location: prop_types__WEBPACK_IMPORTED_MODULE_15___default().shape({
    href: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().string.isRequired),
    origin: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().string.isRequired),
    pathname: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().string.isRequired)
  }).isRequired,
  pageContext: prop_types__WEBPACK_IMPORTED_MODULE_15___default().shape({
    themeOptions: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().object.isRequired),
    swiftypeEngineKey: (prop_types__WEBPACK_IMPORTED_MODULE_15___default().string.isRequired)
  }).isRequired
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NotFoundPage);

/***/ })

};
;
//# sourceMappingURL=component---packages-gatsby-theme-newrelic-src-pages-404-js.js.map