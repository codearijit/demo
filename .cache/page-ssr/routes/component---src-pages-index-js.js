"use strict";
exports.id = "component---src-pages-index-js";
exports.ids = ["component---src-pages-index-js"];
exports.modules = {

/***/ "./src/pages/index.js":
/*!****************************!*\
  !*** ./src/pages/index.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../node_modules/react/index.js");
/* harmony import */ var _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @newrelic/gatsby-theme-newrelic */ "../packages/gatsby-theme-newrelic/index.js");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/react */ "../node_modules/@emotion/react/dist/emotion-react.esm.js");
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

/* eslint-disable no-alert */




const codeSample = `
import React from 'react';
import PropTypes from 'prop-types';

const Button = ({ children, ...props }) => (
  <button type="button" className="button" {...props}>{children}</button>
);

Button.propTypes = {
  children: PropTypes.node
};

export default Button;
`;
const liveCodeSample = `
<Button variant={Button.VARIANT.PRIMARY} onClick={() => alert('Hello!')}>Hello!</Button>
`;
const codeSampleWithAdditionalTags = `
query AccountQuery(<var>$accountId:</var> ID!) {
  <a href="/build-apps">account</a>(id: <var>$accountId</var>) {
    <a href="/build-apps/build-hello-world-app"><var>name</var></a>
  }
}
`;
const anotherSample = `
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: <mark>nri-integration-cfg</mark>
  namespace: default
data:
<mark>  apache-config.yaml: |
    ---
    # Run auto discovery to find pods with label "app=apache"
    # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery
    discovery:
      command:
        # Use the optional arguments:
        # --namespaces: Comma separated namespaces to discover pods on
        # --tls: Use secure (TLS) connection
        # --port: Port used to connect to the kubelet. Default is 10255
        exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port <var>PORT</var> --tls
        match:
          label.app: apache
    <a href="https://one.newrelic.com">integrations</a>:
      - name: nri-apache
        env:
          # Use the discovered IP as the host address
          STATUS_URL: http://\${discovery.ip}/server-status?auto
          METRICS: 1</mark>
`;
const xmlSample = `
<dependency>
  <groupId>com.newrelic.agent.java</groupId>
  <artifactId>newrelic-java</artifactId>
  <version><var>JAVA_AGENT_VERSION</var></version>
  <scope>provided</scope>
  <type>zip</type>
</dependency>
`;

var _ref =  false ? 0 : {
  name: "pwur65-IndexPage",
  styles: "@media screen and (max-width: 1280px){display:none;};label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref2 =  false ? 0 : {
  name: "8tmkp9-IndexPage",
  styles: "padding:5px;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref3 =  false ? 0 : {
  name: "1gjt0jr-IndexPage",
  styles: "padding:2rem;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 =  false ? 0 : {
  name: "1ol1ap4-IndexPage",
  styles: "display:grid;grid-template-columns:repeat(auto-fit, minmax(100px, 1fr));grid-gap:2rem;padding:1rem;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 =  false ? 0 : {
  name: "1gjt0jr-IndexPage",
  styles: "padding:2rem;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref6 =  false ? 0 : {
  name: "1gjt0jr-IndexPage",
  styles: "padding:2rem;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref7 =  false ? 0 : {
  name: "1e2kb7j-IndexPage",
  styles: "display:grid;grid-template-columns:repeat(auto-fit, minmax(100px, 1fr));grid-gap:2rem;padding:1rem;border-radius:4px;background:var(--secondary-background-color);label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref8 =  false ? 0 : {
  name: "1gjt0jr-IndexPage",
  styles: "padding:2rem;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref9 =  false ? 0 : {
  name: "1gjt0jr-IndexPage",
  styles: "padding:2rem;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref10 =  false ? 0 : {
  name: "1jhrgv9-IndexPage",
  styles: "display:grid;grid-template-columns:repeat(auto-fit, minmax(100px, 1fr));grid-gap:2rem;margin-bottom:2rem;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref11 =  false ? 0 : {
  name: "vl0vtf-IndexPage",
  styles: "display:flex;align-items:flex-start;gap:1rem;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref12 =  false ? 0 : {
  name: "ele0nm-IndexPage",
  styles: "display:flex;flex-wrap:wrap;gap:1rem;margin-bottom:2rem;align-items:start;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref13 =  false ? 0 : {
  name: "herl2w-IndexPage",
  styles: "margin-bottom:1rem;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5pc3RyYXRvclxcRGVza3RvcFxcTkVXXFxnYXRzYnktdGhlbWUtbmV3cmVsaWNcXGRlbW9cXHNyY1xccGFnZXNcXGluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBOb0IiLCJmaWxlIjoiQzpcXFVzZXJzXFxBZG1pbmlzdHJhdG9yXFxEZXNrdG9wXFxORVdcXGdhdHNieS10aGVtZS1uZXdyZWxpY1xcZGVtb1xcc3JjXFxwYWdlc1xcaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1hbGVydCAqL1xyXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcclxuaW1wb3J0IHtcclxuICBCdXR0b24sXHJcbiAgQ29kZUJsb2NrLFxyXG4gIENhbGxvdXQsXHJcbiAgQ29sbGFwc2VyLFxyXG4gIENvbGxhcHNlckdyb3VwLFxyXG4gIENvbnRyaWJ1dGluZ0d1aWRlbGluZXMsXHJcbiAgTGF5b3V0LFxyXG4gIExpbmssXHJcbiAgUGFnZVRvb2xzLFxyXG4gIFJlbGF0ZWRSZXNvdXJjZXMsXHJcbiAgU2VhcmNoSW5wdXQsXHJcbiAgU2ltcGxlRmVlZGJhY2ssXHJcbiAgU3VyZmFjZSxcclxuICBUYWJsZSxcclxuICBUYWcsXHJcbiAgVGFnTGlzdCxcclxuICBUZXJtaW5hbCxcclxuICBWaWRlbyxcclxuICB1c2VUcmFuc2xhdGlvbixcclxuICBFeHRlcm5hbExpbmssXHJcbn0gZnJvbSAnQG5ld3JlbGljL2dhdHNieS10aGVtZS1uZXdyZWxpYyc7XHJcblxyXG5jb25zdCBjb2RlU2FtcGxlID0gYFxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuY29uc3QgQnV0dG9uID0gKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IChcclxuICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJidXR0b25cIiB7Li4ucHJvcHN9PntjaGlsZHJlbn08L2J1dHRvbj5cclxuKTtcclxuXHJcbkJ1dHRvbi5wcm9wVHlwZXMgPSB7XHJcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCdXR0b247XHJcbmA7XHJcblxyXG5jb25zdCBsaXZlQ29kZVNhbXBsZSA9IGBcclxuPEJ1dHRvbiB2YXJpYW50PXtCdXR0b24uVkFSSUFOVC5QUklNQVJZfSBvbkNsaWNrPXsoKSA9PiBhbGVydCgnSGVsbG8hJyl9PkhlbGxvITwvQnV0dG9uPlxyXG5gO1xyXG5cclxuY29uc3QgY29kZVNhbXBsZVdpdGhBZGRpdGlvbmFsVGFncyA9IGBcclxucXVlcnkgQWNjb3VudFF1ZXJ5KDx2YXI+JGFjY291bnRJZDo8L3Zhcj4gSUQhKSB7XHJcbiAgPGEgaHJlZj1cIi9idWlsZC1hcHBzXCI+YWNjb3VudDwvYT4oaWQ6IDx2YXI+JGFjY291bnRJZDwvdmFyPikge1xyXG4gICAgPGEgaHJlZj1cIi9idWlsZC1hcHBzL2J1aWxkLWhlbGxvLXdvcmxkLWFwcFwiPjx2YXI+bmFtZTwvdmFyPjwvYT5cclxuICB9XHJcbn1cclxuYDtcclxuXHJcbmNvbnN0IGFub3RoZXJTYW1wbGUgPSBgXHJcbi0tLVxyXG5hcGlWZXJzaW9uOiB2MVxyXG5raW5kOiBDb25maWdNYXBcclxubWV0YWRhdGE6XHJcbiAgbmFtZTogPG1hcms+bnJpLWludGVncmF0aW9uLWNmZzwvbWFyaz5cclxuICBuYW1lc3BhY2U6IGRlZmF1bHRcclxuZGF0YTpcclxuPG1hcms+ICBhcGFjaGUtY29uZmlnLnlhbWw6IHxcclxuICAgIC0tLVxyXG4gICAgIyBSdW4gYXV0byBkaXNjb3ZlcnkgdG8gZmluZCBwb2RzIHdpdGggbGFiZWwgXCJhcHA9YXBhY2hlXCJcclxuICAgICMgaHR0cHM6Ly9kb2NzLm5ld3JlbGljLmNvbS9kb2NzL2ludGVncmF0aW9ucy9ob3N0LWludGVncmF0aW9ucy9pbnN0YWxsYXRpb24vY29udGFpbmVyLWF1dG8tZGlzY292ZXJ5XHJcbiAgICBkaXNjb3Zlcnk6XHJcbiAgICAgIGNvbW1hbmQ6XHJcbiAgICAgICAgIyBVc2UgdGhlIG9wdGlvbmFsIGFyZ3VtZW50czpcclxuICAgICAgICAjIC0tbmFtZXNwYWNlczogQ29tbWEgc2VwYXJhdGVkIG5hbWVzcGFjZXMgdG8gZGlzY292ZXIgcG9kcyBvblxyXG4gICAgICAgICMgLS10bHM6IFVzZSBzZWN1cmUgKFRMUykgY29ubmVjdGlvblxyXG4gICAgICAgICMgLS1wb3J0OiBQb3J0IHVzZWQgdG8gY29ubmVjdCB0byB0aGUga3ViZWxldC4gRGVmYXVsdCBpcyAxMDI1NVxyXG4gICAgICAgIGV4ZWM6IC92YXIvZGIvbmV3cmVsaWMtaW5mcmEvbnJpLWRpc2NvdmVyeS1rdWJlcm5ldGVzIC0tcG9ydCA8dmFyPlBPUlQ8L3Zhcj4gLS10bHNcclxuICAgICAgICBtYXRjaDpcclxuICAgICAgICAgIGxhYmVsLmFwcDogYXBhY2hlXHJcbiAgICA8YSBocmVmPVwiaHR0cHM6Ly9vbmUubmV3cmVsaWMuY29tXCI+aW50ZWdyYXRpb25zPC9hPjpcclxuICAgICAgLSBuYW1lOiBucmktYXBhY2hlXHJcbiAgICAgICAgZW52OlxyXG4gICAgICAgICAgIyBVc2UgdGhlIGRpc2NvdmVyZWQgSVAgYXMgdGhlIGhvc3QgYWRkcmVzc1xyXG4gICAgICAgICAgU1RBVFVTX1VSTDogaHR0cDovL1xcJHtkaXNjb3ZlcnkuaXB9L3NlcnZlci1zdGF0dXM/YXV0b1xyXG4gICAgICAgICAgTUVUUklDUzogMTwvbWFyaz5cclxuYDtcclxuXHJcbmNvbnN0IHhtbFNhbXBsZSA9IGBcclxuPGRlcGVuZGVuY3k+XHJcbiAgPGdyb3VwSWQ+Y29tLm5ld3JlbGljLmFnZW50LmphdmE8L2dyb3VwSWQ+XHJcbiAgPGFydGlmYWN0SWQ+bmV3cmVsaWMtamF2YTwvYXJ0aWZhY3RJZD5cclxuICA8dmVyc2lvbj48dmFyPkpBVkFfQUdFTlRfVkVSU0lPTjwvdmFyPjwvdmVyc2lvbj5cclxuICA8c2NvcGU+cHJvdmlkZWQ8L3Njb3BlPlxyXG4gIDx0eXBlPnppcDwvdHlwZT5cclxuPC9kZXBlbmRlbmN5PlxyXG5gO1xyXG5cclxuY29uc3QgSW5kZXhQYWdlID0gKCkgPT4ge1xyXG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcclxuICBjb25zdCBbc2VhcmNoVGVybSwgc2V0U2VhcmNoVGVybV0gPSB1c2VTdGF0ZSgnJyk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8TGF5b3V0Lk1haW5cclxuICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heCgwLCAxZnIpIDMyMHB4O1xyXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6ICdjb250ZW50IHBhZ2UtdG9vbHMnO1xyXG4gICAgICAgIGdyaWQtZ2FwOiB2YXIoLS1zaXRlLWNvbnRlbnQtcGFkZGluZyk7XHJcblxyXG4gICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEyODBweCkge1xyXG4gICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgoMCwgMWZyKTtcclxuICAgICAgICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6IGNvbnRlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICBgfVxyXG4gICAgPlxyXG4gICAgICA8TGF5b3V0LkNvbnRlbnRcclxuICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgIHNlY3Rpb24ge1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0cmVtO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIGB9XHJcbiAgICAgID5cclxuICAgICAgICA8aDE+e3QoJ2hvbWUud2VsY29tZScpfTwvaDE+XHJcbiAgICAgICAgPHA+e3QoJ2hvbWUuaW50cm8nKX08L3A+XHJcbiAgICAgICAgPHNlY3Rpb24+XHJcbiAgICAgICAgICA8aDI+U2VhcmNoIGlucHV0czwvaDI+XHJcbiAgICAgICAgICA8U2VhcmNoSW5wdXRcclxuICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luOiAnMXJlbSAwJywgbWF4V2lkdGg6ICc1MDBweCcgfX1cclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUZXN0IG91dCBhIHNtYWxsIHNlYXJjaFwiXHJcbiAgICAgICAgICAgIG9uQ2xlYXI9eygpID0+IHNldFNlYXJjaFRlcm0oJycpfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFNlYXJjaFRlcm0oZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICB2YWx1ZT17c2VhcmNoVGVybX1cclxuICAgICAgICAgICAgc2l6ZT17U2VhcmNoSW5wdXQuU0laRS5TTUFMTH1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8U2VhcmNoSW5wdXRcclxuICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luOiAnMXJlbSAwJywgbWF4V2lkdGg6ICc1MDBweCcgfX1cclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUZXN0IG91dCBhIG1lZGl1bSBzZWFyY2hcIlxyXG4gICAgICAgICAgICBvbkNsZWFyPXsoKSA9PiBzZXRTZWFyY2hUZXJtKCcnKX1cclxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRTZWFyY2hUZXJtKGUudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgICAgICAgdmFsdWU9e3NlYXJjaFRlcm19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPFNlYXJjaElucHV0XHJcbiAgICAgICAgICAgIHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogJzFyZW0nLCBtYXhXaWR0aDogJzUwMHB4JyB9fVxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlRlc3Qgb3V0IGEgbGFyZ2Ugc2VhcmNoXCJcclxuICAgICAgICAgICAgb25DbGVhcj17KCkgPT4gc2V0U2VhcmNoVGVybSgnJyl9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0U2VhcmNoVGVybShlLnRhcmdldC52YWx1ZSl9XHJcbiAgICAgICAgICAgIHZhbHVlPXtzZWFyY2hUZXJtfVxyXG4gICAgICAgICAgICBzaXplPXtTZWFyY2hJbnB1dC5TSVpFLkxBUkdFfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPHNlY3Rpb24+XHJcbiAgICAgICAgICA8aDI+Q29sbGFwc2VyczwvaDI+XHJcbiAgICAgICAgICA8Q29sbGFwc2VyR3JvdXA+XHJcbiAgICAgICAgICAgIDxDb2xsYXBzZXIgaWQ9XCJleGFtcGxlLTFcIiB0aXRsZT1cIkNoZWNrIG91dCB0aGlzIGNvb2wgY29sbGFwc2VyXCI+XHJcbiAgICAgICAgICAgICAgVGhpcyBpcyBhIHByZXR0eSBuZWF0IGxpdHRsZSB1dGlsaXR5LiBJIGNhbiBzaG93IGFsbCBraW5kcyBvZlxyXG4gICAgICAgICAgICAgIHN0dWZmIGluIGhlcmUuXHJcbiAgICAgICAgICAgIDwvQ29sbGFwc2VyPlxyXG4gICAgICAgICAgICA8Q29sbGFwc2VyIHRpdGxlPXs8Y29kZT5hcGlfZG9jPC9jb2RlPn0+XHJcbiAgICAgICAgICAgICAgWW91IGNhbiBldmVuIHVzZSBKU1ggaW4gdGhlIHRpdGxlXHJcbiAgICAgICAgICAgIDwvQ29sbGFwc2VyPlxyXG4gICAgICAgICAgICA8Q29sbGFwc2VyIHRpdGxlPVwiVGhpcyBvbmUgaXMgb3BlbiBieSBkZWZhdWx0XCIgZGVmYXVsdE9wZW4+XHJcbiAgICAgICAgICAgICAgQW5kIHlvdSBjYW4gc2VlIGV2ZXJ5dGhpbmcgaW5zaWRlIG9mIGl0IVxyXG4gICAgICAgICAgICA8L0NvbGxhcHNlcj5cclxuICAgICAgICAgIDwvQ29sbGFwc2VyR3JvdXA+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIDxzZWN0aW9uPlxyXG4gICAgICAgICAgPENhbGxvdXQgdmFyaWFudD17Q2FsbG91dC5WQVJJQU5ULkNBVVRJT059PlxyXG4gICAgICAgICAgICBEYW5nZXIhIEV4ZXJjaXNlIGV4dHJlbWUgY2F1dGlvbi5cclxuICAgICAgICAgIDwvQ2FsbG91dD5cclxuICAgICAgICAgIDxDYWxsb3V0IHZhcmlhbnQ9e0NhbGxvdXQuVkFSSUFOVC5JTVBPUlRBTlR9PlxyXG4gICAgICAgICAgICBJbXBvcnRhbnQhIEkgc2FpZCwgdGhpcyBpcyBpbXBvcnRhbnQuXHJcbiAgICAgICAgICA8L0NhbGxvdXQ+XHJcbiAgICAgICAgICA8Q2FsbG91dCB2YXJpYW50PXtDYWxsb3V0LlZBUklBTlQuVElQfT5IZXJlJ3MgYSB0aXAuPC9DYWxsb3V0PlxyXG4gICAgICAgICAgPENhbGxvdXQgdmFyaWFudD17Q2FsbG91dC5WQVJJQU5ULlRJUH0gdGl0bGU9XCJIZWxsb1wiPlxyXG4gICAgICAgICAgICBIZXJlJ3MgYSB0aXAgd2l0aCBhIGN1c3RvbSB0aXRsZVxyXG4gICAgICAgICAgPC9DYWxsb3V0PlxyXG4gICAgICAgICAgPENhbGxvdXQgdmFyaWFudD17Q2FsbG91dC5WQVJJQU5ULlRJUH0gdGl0bGU9e251bGx9PlxyXG4gICAgICAgICAgICBIZXJlJ3MgYSB0aXAgd2l0aCBubyB0aXRsZVxyXG4gICAgICAgICAgPC9DYWxsb3V0PlxyXG4gICAgICAgICAgPENhbGxvdXQgdmFyaWFudD17Q2FsbG91dC5WQVJJQU5ULkNPVVJTRX0+XHJcbiAgICAgICAgICAgIFRoaXMgY2FsbG91dCBpcyBmb3IgYSBndWlkZSB0aGF0IGlzIHBhcnQgb2YgYSBzdXBlciBjb29sIGNvdXJzZVxyXG4gICAgICAgICAgPC9DYWxsb3V0PlxyXG4gICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgICA8c2VjdGlvbj5cclxuICAgICAgICAgIDxoMj5BIGNvZGUgYmxvY2s8L2gyPlxyXG4gICAgICAgICAgPENvZGVCbG9ja1xyXG4gICAgICAgICAgICBjb3B5YWJsZVxyXG4gICAgICAgICAgICBsaW5lTnVtYmVyc1xyXG4gICAgICAgICAgICBoaWdobGlnaHRlZExpbmVzPVwiNS03LDExXCJcclxuICAgICAgICAgICAgZmlsZU5hbWU9XCJzcmMvY29tcG9uZW50cy9CdXR0b24uanNcIlxyXG4gICAgICAgICAgICBsYW5ndWFnZT1cImpzeFwiXHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHtjb2RlU2FtcGxlfVxyXG4gICAgICAgICAgPC9Db2RlQmxvY2s+XHJcbiAgICAgICAgICA8aDI+QSBsaXZlIGVkaXRhYmxlIGNvZGUgYmxvY2sgdy8gcHJldmlldzwvaDI+XHJcbiAgICAgICAgICA8Q29kZUJsb2NrXHJcbiAgICAgICAgICAgIGNvcHlhYmxlXHJcbiAgICAgICAgICAgIGxpbmVOdW1iZXJzXHJcbiAgICAgICAgICAgIGxpdmVcclxuICAgICAgICAgICAgcHJldmlld1xyXG4gICAgICAgICAgICBmaWxlTmFtZT1cInNyYy9jb21wb25lbnRzL0J1dHRvbi5qc1wiXHJcbiAgICAgICAgICAgIGxhbmd1YWdlPVwianN4XCJcclxuICAgICAgICAgICAgc2NvcGU9e3sgQnV0dG9uIH19XHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHtsaXZlQ29kZVNhbXBsZX1cclxuICAgICAgICAgIDwvQ29kZUJsb2NrPlxyXG4gICAgICAgICAgPGgyPkNvZGUgYmxvY2sgdy8gZW1iZWRkZWQgdmFyL21hcmsvbGlua3M8L2gyPlxyXG4gICAgICAgICAgPENvZGVCbG9ja1xyXG4gICAgICAgICAgICBsYW5ndWFnZT1cImdyYXBocWxcIlxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICB7Y29kZVNhbXBsZVdpdGhBZGRpdGlvbmFsVGFnc31cclxuICAgICAgICAgIDwvQ29kZUJsb2NrPlxyXG4gICAgICAgICAgPENvZGVCbG9ja1xyXG4gICAgICAgICAgICBsYW5ndWFnZT1cInlhbWxcIlxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICB7YW5vdGhlclNhbXBsZX1cclxuICAgICAgICAgIDwvQ29kZUJsb2NrPlxyXG4gICAgICAgICAgPENvZGVCbG9jayBsYW5ndWFnZT1cInhtbFwiPnt4bWxTYW1wbGV9PC9Db2RlQmxvY2s+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIDxzZWN0aW9uPlxyXG4gICAgICAgICAgPGgyPlRlcm1pbmFsPC9oMj5cclxuICAgICAgICAgIDxUZXJtaW5hbD5jZCBwYWNrYWdlcy9nYXRzYnktdGhlbWUtbmV3cmVsaWM8L1Rlcm1pbmFsPlxyXG5cclxuICAgICAgICAgIDxoMj5BbmltYXRlZCB0ZXJtaW5hbDwvaDI+XHJcbiAgICAgICAgICA8VGVybWluYWwgYW5pbWF0ZT5cclxuICAgICAgICAgICAge2BcclxubnIxIGNyZWF0ZSAtLXR5cGUgbmVyZHBhY2sgLS1uYW1lIHBhZ2V2aWV3cy1hcHBcclxuW291dHB1dF0ge3N1Y2Nlc3N94pyUICB7cGxhaW59Q29tcG9uZW50IGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5IVxyXG5bb3V0cHV0XSAgICB7cHVycGxlfW5lcmRwYWNrIHtibHVlfXBhZ2V2aWV3cy1hcHAge3BsYWlufWlzIGF2YWlsYWJsZSBhdCB7Z3JlZW59XCIuL3BhZ2V2aWV3cy1hcHBcIlxyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgICAgPC9UZXJtaW5hbD5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPHNlY3Rpb24+XHJcbiAgICAgICAgICA8aDI+QnV0dG9uczwvaDI+XHJcbiAgICAgICAgICA8aDM+VmFyaWFudHM8L2gzPlxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgICAgICAgICAgICBnYXA6IDFyZW07XHJcbiAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcclxuICAgICAgICAgICAgICBhbGlnbi1pdGVtczogc3RhcnQ7XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBhbGVydCgnSGVsbG8hJyl9XHJcbiAgICAgICAgICAgICAgdmFyaWFudD17QnV0dG9uLlZBUklBTlQuUFJJTUFSWX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIFByaW1hcnlcclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBhbGVydCgnSGVsbG8hJyl9XHJcbiAgICAgICAgICAgICAgdmFyaWFudD17QnV0dG9uLlZBUklBTlQuTk9STUFMfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgTm9ybWFsXHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gYWxlcnQoJ0hlbGxvIScpfVxyXG4gICAgICAgICAgICAgIHZhcmlhbnQ9e0J1dHRvbi5WQVJJQU5ULk9VVExJTkV9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBPdXRsaW5lXHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gYWxlcnQoJ0hlbGxvIScpfVxyXG4gICAgICAgICAgICAgIHZhcmlhbnQ9e0J1dHRvbi5WQVJJQU5ULkxJTkt9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBMaW5rXHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8aDM+U2l6ZXM8L2gzPlxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xyXG4gICAgICAgICAgICAgIGdhcDogMXJlbTtcclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGFsZXJ0KCdIZWxsbyEnKX1cclxuICAgICAgICAgICAgICB2YXJpYW50PXtCdXR0b24uVkFSSUFOVC5QUklNQVJZfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgRGVmYXVsdFxyXG4gICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGFsZXJ0KCdIZWxsbyEnKX1cclxuICAgICAgICAgICAgICB2YXJpYW50PXtCdXR0b24uVkFSSUFOVC5QUklNQVJZfVxyXG4gICAgICAgICAgICAgIHNpemU9e0J1dHRvbi5TSVpFLlNNQUxMfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgU21hbGxcclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBhbGVydCgnSGVsbG8hJyl9XHJcbiAgICAgICAgICAgICAgdmFyaWFudD17QnV0dG9uLlZBUklBTlQuUFJJTUFSWX1cclxuICAgICAgICAgICAgICBzaXplPXtCdXR0b24uU0laRS5FWFRSQV9TTUFMTH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIEV4dHJhIHNtYWxsXHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIDxzZWN0aW9uPlxyXG4gICAgICAgICAgPFJlbGF0ZWRSZXNvdXJjZXNcclxuICAgICAgICAgICAgcmVzb3VyY2VzPXtbXHJcbiAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly9uZXdyZWxpYy5jb20vaW5zdGFudC1vYnNlcnZhYmlsaXR5LycsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ2RldmVsb3BlcicsXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIDxzZWN0aW9uPlxyXG4gICAgICAgICAgPGgyPlByaW1hcnkgc3VyZmFjZXM8L2gyPlxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LCBtaW5tYXgoMTAwcHgsIDFmcikpO1xyXG4gICAgICAgICAgICAgIGdyaWQtZ2FwOiAycmVtO1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxTdXJmYWNlXHJcbiAgICAgICAgICAgICAgYmFzZT17U3VyZmFjZS5CQVNFLlBSSU1BUll9XHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBOb24taW50ZXJhY3RpdmVcclxuICAgICAgICAgICAgPC9TdXJmYWNlPlxyXG4gICAgICAgICAgICA8U3VyZmFjZVxyXG4gICAgICAgICAgICAgIGludGVyYWN0aXZlXHJcbiAgICAgICAgICAgICAgYmFzZT17U3VyZmFjZS5CQVNFLlBSSU1BUll9XHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBJbnRlcmFjdGl2ZVxyXG4gICAgICAgICAgICA8L1N1cmZhY2U+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxoMj5TZWNvbmRhcnkgc3VyZmFjZXM8L2gyPlxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LCBtaW5tYXgoMTAwcHgsIDFmcikpO1xyXG4gICAgICAgICAgICAgIGdyaWQtZ2FwOiAycmVtO1xyXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yKTtcclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPFN1cmZhY2VcclxuICAgICAgICAgICAgICBiYXNlPXtTdXJmYWNlLkJBU0UuU0VDT05EQVJZfVxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMnJlbTtcclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgTm9uLWludGVyYWN0aXZlXHJcbiAgICAgICAgICAgIDwvU3VyZmFjZT5cclxuICAgICAgICAgICAgPFN1cmZhY2VcclxuICAgICAgICAgICAgICBpbnRlcmFjdGl2ZVxyXG4gICAgICAgICAgICAgIGJhc2U9e1N1cmZhY2UuQkFTRS5TRUNPTkRBUll9XHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBJbnRlcmFjdGl2ZVxyXG4gICAgICAgICAgICA8L1N1cmZhY2U+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxoMj5TdXJmYWNlcyBhcyBvdGhlciBlbGVtZW50czwvaDI+XHJcbiAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCgxMDBweCwgMWZyKSk7XHJcbiAgICAgICAgICAgICAgZ3JpZC1nYXA6IDJyZW07XHJcbiAgICAgICAgICAgICAgcGFkZGluZzogMXJlbTtcclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPFN1cmZhY2VcclxuICAgICAgICAgICAgICBiYXNlPXtTdXJmYWNlLkJBU0UuUFJJTUFSWX1cclxuICAgICAgICAgICAgICB0bz1cImZvb2JhclwiXHJcbiAgICAgICAgICAgICAgYXM9e0xpbmt9XHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBJJ20gYSBsaW5rIVxyXG4gICAgICAgICAgICA8L1N1cmZhY2U+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPHNlY3Rpb24+XHJcbiAgICAgICAgICA8aDI+V2lzdGlhIHZpZGVvPC9oMj5cclxuICAgICAgICAgIDxWaWRlbyBpZD1cImlueXNocDNtN3JcIiB0eXBlPXtWaWRlby5UWVBFLldJU1RJQX0gd2lkdGg9XCI1MDBweFwiIC8+XHJcbiAgICAgICAgICA8aDI+WW91VHViZSB2aWRlbzwvaDI+XHJcbiAgICAgICAgICA8VmlkZW8gaWQ9XCJaYWdaZk5RWUpFVVwiIHR5cGU9e1ZpZGVvLlRZUEUuWU9VVFVCRX0gd2lkdGg9XCI1MDBweFwiIC8+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIDxzZWN0aW9uPlxyXG4gICAgICAgICAgPGgyPkludGVybmFsIExpbmtzPC9oMj5cclxuICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICBUaGlzIDxMaW5rIHRvPVwiL2J1aWxkLWFwcHNcIj5JbnRlcm5hbCBMaW5rPC9MaW5rPiBhdXRvbWF0aWNhbGx5IHVzZXNcclxuICAgICAgICAgICAgbG9jYWxpemVkIHBhdGggaWYgb24gdHJhbnNsYXRlZCBzaXRlLlxyXG4gICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgIFRoaXN7JyAnfVxyXG4gICAgICAgICAgICA8TGluayB0bz1cIi9idWlsZC1hcHBzXCIgc2hvdWxkQXV0b0xvY2FsaXplPXtmYWxzZX0+XHJcbiAgICAgICAgICAgICAgSW50ZXJuYWwgTGlua1xyXG4gICAgICAgICAgICA8L0xpbms+eycgJ31cclxuICAgICAgICAgICAgZG9lcyBub3QgYXV0b21hdGljYWxseSB1c2UgbG9jYWxpemVkIHBhdGggaWYgb24gdHJhbnNsYXRlZCBzaXRlLlxyXG4gICAgICAgICAgPC9wPlxyXG4gICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgICA8c2VjdGlvbj5cclxuICAgICAgICAgIDxoMj5FeHRlcm5hbCBMaW5rczwvaDI+XHJcbiAgICAgICAgICA8U3VyZmFjZVxyXG4gICAgICAgICAgICBiYXNlPXtTdXJmYWNlLkJBU0UuUFJJTUFSWX1cclxuICAgICAgICAgICAgdG89XCJodHRwczovL25ld3JlbGljLmNvbVwiXHJcbiAgICAgICAgICAgIGFzPXtMaW5rfVxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBwYWRkaW5nOiA1cHg7XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgIGRpc3BsYXlFeHRlcm5hbEljb25cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgU3VyZmFjZVxyXG4gICAgICAgICAgPC9TdXJmYWNlPlxyXG4gICAgICAgICAgPEJ1dHRvbiBhcz17TGlua30gZGlzcGxheUV4dGVybmFsSWNvbiB0bz1cImh0dHBzOi8vbmV3cmVsaWMuY29tXCI+XHJcbiAgICAgICAgICAgIEJ1dHRvblxyXG4gICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICA8RXh0ZXJuYWxMaW5rIHRvPVwiaHR0cHM6Ly9uZXdyZWxpYy5jb21cIiBkaXNwbGF5RXh0ZXJuYWxJY29uPlxyXG4gICAgICAgICAgICBFeHRlcm5hbCBMaW5rXHJcbiAgICAgICAgICA8L0V4dGVybmFsTGluaz5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPHNlY3Rpb24+XHJcbiAgICAgICAgICA8aDI+VGFibGVzPC9oMj5cclxuICAgICAgICAgIDxUYWJsZT5cclxuICAgICAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgIDx0ZD5Db2wgMTwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQ+Q29sIDI8L3RkPlxyXG4gICAgICAgICAgICAgICAgPHRkPkNvbCAzPC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZD5Db2wgNDwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQ+Q29sIDU8L3RkPlxyXG4gICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICB7QXJyYXkuZnJvbSh7IGxlbmd0aDogMTAgfSwgKF8sIGkpID0+IGkgKyAxKS5tYXAoKG51bSkgPT4gKFxyXG4gICAgICAgICAgICAgICAgPHRyIGtleT17bnVtfT5cclxuICAgICAgICAgICAgICAgICAgPHRkPlJvdyB7bnVtfSAtIENvbHVtbiAxPC90ZD5cclxuICAgICAgICAgICAgICAgICAgPHRkPlJvdyB7bnVtfSAtIENvbHVtbiAyPC90ZD5cclxuICAgICAgICAgICAgICAgICAgPHRkPlJvdyB7bnVtfSAtIENvbHVtbiAzPC90ZD5cclxuICAgICAgICAgICAgICAgICAgPHRkPlJvdyB7bnVtfSAtIENvbHVtbiA0PC90ZD5cclxuICAgICAgICAgICAgICAgICAgPHRkPlJvdyB7bnVtfSAtIENvbHVtbiA1PC90ZD5cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICA8L1RhYmxlPlxyXG4gICAgICAgIDwvc2VjdGlvbj5cclxuXHJcbiAgICAgICAgPHNlY3Rpb24+XHJcbiAgICAgICAgICA8VGFnTGlzdD5cclxuICAgICAgICAgICAgPFRhZz5SZWFjdDwvVGFnPlxyXG4gICAgICAgICAgICA8VGFnIGludGVyYWN0aXZlPkFnZW50PC9UYWc+XHJcbiAgICAgICAgICA8L1RhZ0xpc3Q+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICA8L0xheW91dC5Db250ZW50PlxyXG4gICAgICA8TGF5b3V0LlBhZ2VUb29sc1xyXG4gICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTI4MHB4KSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgYH1cclxuICAgICAgPlxyXG4gICAgICAgIDxTaW1wbGVGZWVkYmFjayBwYWdlVGl0bGU9XCJEZW1vIFNpdGVcIiAvPlxyXG4gICAgICAgIDxDb250cmlidXRpbmdHdWlkZWxpbmVzIGZpbGVSZWxhdGl2ZVBhdGg9XCJkZW1vL3NyYy9wYWdlcy9pbmRleC5qc1wiIC8+XHJcbiAgICAgICAgPFBhZ2VUb29scy5TZWN0aW9uPlxyXG4gICAgICAgICAgPFBhZ2VUb29scy5UaXRsZT5Ib3cgdG8gdXNlPC9QYWdlVG9vbHMuVGl0bGU+XHJcbiAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgVGhlIDxjb2RlPlBhZ2VUb29sczwvY29kZT4gY29tcG9uZW50IGlzIGdyZWF0IGZvciB1c2UgYXMgYSBzaWRlYmFyXHJcbiAgICAgICAgICAgIHRvIGdpdmUgcGFnZS1zcGVjaWZpYyBjb250ZXh0IHRvIGEgdXNlclxyXG4gICAgICAgICAgPC9wPlxyXG4gICAgICAgIDwvUGFnZVRvb2xzLlNlY3Rpb24+XHJcbiAgICAgIDwvTGF5b3V0LlBhZ2VUb29scz5cclxuICAgIDwvTGF5b3V0Lk1haW4+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEluZGV4UGFnZTtcclxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref14 =  false ? 0 : {
  name: "herl2w-IndexPage",
  styles: "margin-bottom:1rem;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref15 =  false ? 0 : {
  name: "1njmmdg-IndexPage",
  styles: "margin-bottom:2rem;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5pc3RyYXRvclxcRGVza3RvcFxcTkVXXFxnYXRzYnktdGhlbWUtbmV3cmVsaWNcXGRlbW9cXHNyY1xccGFnZXNcXGluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlNb0IiLCJmaWxlIjoiQzpcXFVzZXJzXFxBZG1pbmlzdHJhdG9yXFxEZXNrdG9wXFxORVdcXGdhdHNieS10aGVtZS1uZXdyZWxpY1xcZGVtb1xcc3JjXFxwYWdlc1xcaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1hbGVydCAqL1xyXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcclxuaW1wb3J0IHtcclxuICBCdXR0b24sXHJcbiAgQ29kZUJsb2NrLFxyXG4gIENhbGxvdXQsXHJcbiAgQ29sbGFwc2VyLFxyXG4gIENvbGxhcHNlckdyb3VwLFxyXG4gIENvbnRyaWJ1dGluZ0d1aWRlbGluZXMsXHJcbiAgTGF5b3V0LFxyXG4gIExpbmssXHJcbiAgUGFnZVRvb2xzLFxyXG4gIFJlbGF0ZWRSZXNvdXJjZXMsXHJcbiAgU2VhcmNoSW5wdXQsXHJcbiAgU2ltcGxlRmVlZGJhY2ssXHJcbiAgU3VyZmFjZSxcclxuICBUYWJsZSxcclxuICBUYWcsXHJcbiAgVGFnTGlzdCxcclxuICBUZXJtaW5hbCxcclxuICBWaWRlbyxcclxuICB1c2VUcmFuc2xhdGlvbixcclxuICBFeHRlcm5hbExpbmssXHJcbn0gZnJvbSAnQG5ld3JlbGljL2dhdHNieS10aGVtZS1uZXdyZWxpYyc7XHJcblxyXG5jb25zdCBjb2RlU2FtcGxlID0gYFxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuY29uc3QgQnV0dG9uID0gKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IChcclxuICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJidXR0b25cIiB7Li4ucHJvcHN9PntjaGlsZHJlbn08L2J1dHRvbj5cclxuKTtcclxuXHJcbkJ1dHRvbi5wcm9wVHlwZXMgPSB7XHJcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCdXR0b247XHJcbmA7XHJcblxyXG5jb25zdCBsaXZlQ29kZVNhbXBsZSA9IGBcclxuPEJ1dHRvbiB2YXJpYW50PXtCdXR0b24uVkFSSUFOVC5QUklNQVJZfSBvbkNsaWNrPXsoKSA9PiBhbGVydCgnSGVsbG8hJyl9PkhlbGxvITwvQnV0dG9uPlxyXG5gO1xyXG5cclxuY29uc3QgY29kZVNhbXBsZVdpdGhBZGRpdGlvbmFsVGFncyA9IGBcclxucXVlcnkgQWNjb3VudFF1ZXJ5KDx2YXI+JGFjY291bnRJZDo8L3Zhcj4gSUQhKSB7XHJcbiAgPGEgaHJlZj1cIi9idWlsZC1hcHBzXCI+YWNjb3VudDwvYT4oaWQ6IDx2YXI+JGFjY291bnRJZDwvdmFyPikge1xyXG4gICAgPGEgaHJlZj1cIi9idWlsZC1hcHBzL2J1aWxkLWhlbGxvLXdvcmxkLWFwcFwiPjx2YXI+bmFtZTwvdmFyPjwvYT5cclxuICB9XHJcbn1cclxuYDtcclxuXHJcbmNvbnN0IGFub3RoZXJTYW1wbGUgPSBgXHJcbi0tLVxyXG5hcGlWZXJzaW9uOiB2MVxyXG5raW5kOiBDb25maWdNYXBcclxubWV0YWRhdGE6XHJcbiAgbmFtZTogPG1hcms+bnJpLWludGVncmF0aW9uLWNmZzwvbWFyaz5cclxuICBuYW1lc3BhY2U6IGRlZmF1bHRcclxuZGF0YTpcclxuPG1hcms+ICBhcGFjaGUtY29uZmlnLnlhbWw6IHxcclxuICAgIC0tLVxyXG4gICAgIyBSdW4gYXV0byBkaXNjb3ZlcnkgdG8gZmluZCBwb2RzIHdpdGggbGFiZWwgXCJhcHA9YXBhY2hlXCJcclxuICAgICMgaHR0cHM6Ly9kb2NzLm5ld3JlbGljLmNvbS9kb2NzL2ludGVncmF0aW9ucy9ob3N0LWludGVncmF0aW9ucy9pbnN0YWxsYXRpb24vY29udGFpbmVyLWF1dG8tZGlzY292ZXJ5XHJcbiAgICBkaXNjb3Zlcnk6XHJcbiAgICAgIGNvbW1hbmQ6XHJcbiAgICAgICAgIyBVc2UgdGhlIG9wdGlvbmFsIGFyZ3VtZW50czpcclxuICAgICAgICAjIC0tbmFtZXNwYWNlczogQ29tbWEgc2VwYXJhdGVkIG5hbWVzcGFjZXMgdG8gZGlzY292ZXIgcG9kcyBvblxyXG4gICAgICAgICMgLS10bHM6IFVzZSBzZWN1cmUgKFRMUykgY29ubmVjdGlvblxyXG4gICAgICAgICMgLS1wb3J0OiBQb3J0IHVzZWQgdG8gY29ubmVjdCB0byB0aGUga3ViZWxldC4gRGVmYXVsdCBpcyAxMDI1NVxyXG4gICAgICAgIGV4ZWM6IC92YXIvZGIvbmV3cmVsaWMtaW5mcmEvbnJpLWRpc2NvdmVyeS1rdWJlcm5ldGVzIC0tcG9ydCA8dmFyPlBPUlQ8L3Zhcj4gLS10bHNcclxuICAgICAgICBtYXRjaDpcclxuICAgICAgICAgIGxhYmVsLmFwcDogYXBhY2hlXHJcbiAgICA8YSBocmVmPVwiaHR0cHM6Ly9vbmUubmV3cmVsaWMuY29tXCI+aW50ZWdyYXRpb25zPC9hPjpcclxuICAgICAgLSBuYW1lOiBucmktYXBhY2hlXHJcbiAgICAgICAgZW52OlxyXG4gICAgICAgICAgIyBVc2UgdGhlIGRpc2NvdmVyZWQgSVAgYXMgdGhlIGhvc3QgYWRkcmVzc1xyXG4gICAgICAgICAgU1RBVFVTX1VSTDogaHR0cDovL1xcJHtkaXNjb3ZlcnkuaXB9L3NlcnZlci1zdGF0dXM/YXV0b1xyXG4gICAgICAgICAgTUVUUklDUzogMTwvbWFyaz5cclxuYDtcclxuXHJcbmNvbnN0IHhtbFNhbXBsZSA9IGBcclxuPGRlcGVuZGVuY3k+XHJcbiAgPGdyb3VwSWQ+Y29tLm5ld3JlbGljLmFnZW50LmphdmE8L2dyb3VwSWQ+XHJcbiAgPGFydGlmYWN0SWQ+bmV3cmVsaWMtamF2YTwvYXJ0aWZhY3RJZD5cclxuICA8dmVyc2lvbj48dmFyPkpBVkFfQUdFTlRfVkVSU0lPTjwvdmFyPjwvdmVyc2lvbj5cclxuICA8c2NvcGU+cHJvdmlkZWQ8L3Njb3BlPlxyXG4gIDx0eXBlPnppcDwvdHlwZT5cclxuPC9kZXBlbmRlbmN5PlxyXG5gO1xyXG5cclxuY29uc3QgSW5kZXhQYWdlID0gKCkgPT4ge1xyXG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oKTtcclxuICBjb25zdCBbc2VhcmNoVGVybSwgc2V0U2VhcmNoVGVybV0gPSB1c2VTdGF0ZSgnJyk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8TGF5b3V0Lk1haW5cclxuICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heCgwLCAxZnIpIDMyMHB4O1xyXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6ICdjb250ZW50IHBhZ2UtdG9vbHMnO1xyXG4gICAgICAgIGdyaWQtZ2FwOiB2YXIoLS1zaXRlLWNvbnRlbnQtcGFkZGluZyk7XHJcblxyXG4gICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEyODBweCkge1xyXG4gICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgoMCwgMWZyKTtcclxuICAgICAgICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6IGNvbnRlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICBgfVxyXG4gICAgPlxyXG4gICAgICA8TGF5b3V0LkNvbnRlbnRcclxuICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgIHNlY3Rpb24ge1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0cmVtO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIGB9XHJcbiAgICAgID5cclxuICAgICAgICA8aDE+e3QoJ2hvbWUud2VsY29tZScpfTwvaDE+XHJcbiAgICAgICAgPHA+e3QoJ2hvbWUuaW50cm8nKX08L3A+XHJcbiAgICAgICAgPHNlY3Rpb24+XHJcbiAgICAgICAgICA8aDI+U2VhcmNoIGlucHV0czwvaDI+XHJcbiAgICAgICAgICA8U2VhcmNoSW5wdXRcclxuICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luOiAnMXJlbSAwJywgbWF4V2lkdGg6ICc1MDBweCcgfX1cclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUZXN0IG91dCBhIHNtYWxsIHNlYXJjaFwiXHJcbiAgICAgICAgICAgIG9uQ2xlYXI9eygpID0+IHNldFNlYXJjaFRlcm0oJycpfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFNlYXJjaFRlcm0oZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICB2YWx1ZT17c2VhcmNoVGVybX1cclxuICAgICAgICAgICAgc2l6ZT17U2VhcmNoSW5wdXQuU0laRS5TTUFMTH1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8U2VhcmNoSW5wdXRcclxuICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luOiAnMXJlbSAwJywgbWF4V2lkdGg6ICc1MDBweCcgfX1cclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUZXN0IG91dCBhIG1lZGl1bSBzZWFyY2hcIlxyXG4gICAgICAgICAgICBvbkNsZWFyPXsoKSA9PiBzZXRTZWFyY2hUZXJtKCcnKX1cclxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRTZWFyY2hUZXJtKGUudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgICAgICAgdmFsdWU9e3NlYXJjaFRlcm19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPFNlYXJjaElucHV0XHJcbiAgICAgICAgICAgIHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogJzFyZW0nLCBtYXhXaWR0aDogJzUwMHB4JyB9fVxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlRlc3Qgb3V0IGEgbGFyZ2Ugc2VhcmNoXCJcclxuICAgICAgICAgICAgb25DbGVhcj17KCkgPT4gc2V0U2VhcmNoVGVybSgnJyl9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0U2VhcmNoVGVybShlLnRhcmdldC52YWx1ZSl9XHJcbiAgICAgICAgICAgIHZhbHVlPXtzZWFyY2hUZXJtfVxyXG4gICAgICAgICAgICBzaXplPXtTZWFyY2hJbnB1dC5TSVpFLkxBUkdFfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPHNlY3Rpb24+XHJcbiAgICAgICAgICA8aDI+Q29sbGFwc2VyczwvaDI+XHJcbiAgICAgICAgICA8Q29sbGFwc2VyR3JvdXA+XHJcbiAgICAgICAgICAgIDxDb2xsYXBzZXIgaWQ9XCJleGFtcGxlLTFcIiB0aXRsZT1cIkNoZWNrIG91dCB0aGlzIGNvb2wgY29sbGFwc2VyXCI+XHJcbiAgICAgICAgICAgICAgVGhpcyBpcyBhIHByZXR0eSBuZWF0IGxpdHRsZSB1dGlsaXR5LiBJIGNhbiBzaG93IGFsbCBraW5kcyBvZlxyXG4gICAgICAgICAgICAgIHN0dWZmIGluIGhlcmUuXHJcbiAgICAgICAgICAgIDwvQ29sbGFwc2VyPlxyXG4gICAgICAgICAgICA8Q29sbGFwc2VyIHRpdGxlPXs8Y29kZT5hcGlfZG9jPC9jb2RlPn0+XHJcbiAgICAgICAgICAgICAgWW91IGNhbiBldmVuIHVzZSBKU1ggaW4gdGhlIHRpdGxlXHJcbiAgICAgICAgICAgIDwvQ29sbGFwc2VyPlxyXG4gICAgICAgICAgICA8Q29sbGFwc2VyIHRpdGxlPVwiVGhpcyBvbmUgaXMgb3BlbiBieSBkZWZhdWx0XCIgZGVmYXVsdE9wZW4+XHJcbiAgICAgICAgICAgICAgQW5kIHlvdSBjYW4gc2VlIGV2ZXJ5dGhpbmcgaW5zaWRlIG9mIGl0IVxyXG4gICAgICAgICAgICA8L0NvbGxhcHNlcj5cclxuICAgICAgICAgIDwvQ29sbGFwc2VyR3JvdXA+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIDxzZWN0aW9uPlxyXG4gICAgICAgICAgPENhbGxvdXQgdmFyaWFudD17Q2FsbG91dC5WQVJJQU5ULkNBVVRJT059PlxyXG4gICAgICAgICAgICBEYW5nZXIhIEV4ZXJjaXNlIGV4dHJlbWUgY2F1dGlvbi5cclxuICAgICAgICAgIDwvQ2FsbG91dD5cclxuICAgICAgICAgIDxDYWxsb3V0IHZhcmlhbnQ9e0NhbGxvdXQuVkFSSUFOVC5JTVBPUlRBTlR9PlxyXG4gICAgICAgICAgICBJbXBvcnRhbnQhIEkgc2FpZCwgdGhpcyBpcyBpbXBvcnRhbnQuXHJcbiAgICAgICAgICA8L0NhbGxvdXQ+XHJcbiAgICAgICAgICA8Q2FsbG91dCB2YXJpYW50PXtDYWxsb3V0LlZBUklBTlQuVElQfT5IZXJlJ3MgYSB0aXAuPC9DYWxsb3V0PlxyXG4gICAgICAgICAgPENhbGxvdXQgdmFyaWFudD17Q2FsbG91dC5WQVJJQU5ULlRJUH0gdGl0bGU9XCJIZWxsb1wiPlxyXG4gICAgICAgICAgICBIZXJlJ3MgYSB0aXAgd2l0aCBhIGN1c3RvbSB0aXRsZVxyXG4gICAgICAgICAgPC9DYWxsb3V0PlxyXG4gICAgICAgICAgPENhbGxvdXQgdmFyaWFudD17Q2FsbG91dC5WQVJJQU5ULlRJUH0gdGl0bGU9e251bGx9PlxyXG4gICAgICAgICAgICBIZXJlJ3MgYSB0aXAgd2l0aCBubyB0aXRsZVxyXG4gICAgICAgICAgPC9DYWxsb3V0PlxyXG4gICAgICAgICAgPENhbGxvdXQgdmFyaWFudD17Q2FsbG91dC5WQVJJQU5ULkNPVVJTRX0+XHJcbiAgICAgICAgICAgIFRoaXMgY2FsbG91dCBpcyBmb3IgYSBndWlkZSB0aGF0IGlzIHBhcnQgb2YgYSBzdXBlciBjb29sIGNvdXJzZVxyXG4gICAgICAgICAgPC9DYWxsb3V0PlxyXG4gICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgICA8c2VjdGlvbj5cclxuICAgICAgICAgIDxoMj5BIGNvZGUgYmxvY2s8L2gyPlxyXG4gICAgICAgICAgPENvZGVCbG9ja1xyXG4gICAgICAgICAgICBjb3B5YWJsZVxyXG4gICAgICAgICAgICBsaW5lTnVtYmVyc1xyXG4gICAgICAgICAgICBoaWdobGlnaHRlZExpbmVzPVwiNS03LDExXCJcclxuICAgICAgICAgICAgZmlsZU5hbWU9XCJzcmMvY29tcG9uZW50cy9CdXR0b24uanNcIlxyXG4gICAgICAgICAgICBsYW5ndWFnZT1cImpzeFwiXHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHtjb2RlU2FtcGxlfVxyXG4gICAgICAgICAgPC9Db2RlQmxvY2s+XHJcbiAgICAgICAgICA8aDI+QSBsaXZlIGVkaXRhYmxlIGNvZGUgYmxvY2sgdy8gcHJldmlldzwvaDI+XHJcbiAgICAgICAgICA8Q29kZUJsb2NrXHJcbiAgICAgICAgICAgIGNvcHlhYmxlXHJcbiAgICAgICAgICAgIGxpbmVOdW1iZXJzXHJcbiAgICAgICAgICAgIGxpdmVcclxuICAgICAgICAgICAgcHJldmlld1xyXG4gICAgICAgICAgICBmaWxlTmFtZT1cInNyYy9jb21wb25lbnRzL0J1dHRvbi5qc1wiXHJcbiAgICAgICAgICAgIGxhbmd1YWdlPVwianN4XCJcclxuICAgICAgICAgICAgc2NvcGU9e3sgQnV0dG9uIH19XHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHtsaXZlQ29kZVNhbXBsZX1cclxuICAgICAgICAgIDwvQ29kZUJsb2NrPlxyXG4gICAgICAgICAgPGgyPkNvZGUgYmxvY2sgdy8gZW1iZWRkZWQgdmFyL21hcmsvbGlua3M8L2gyPlxyXG4gICAgICAgICAgPENvZGVCbG9ja1xyXG4gICAgICAgICAgICBsYW5ndWFnZT1cImdyYXBocWxcIlxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICB7Y29kZVNhbXBsZVdpdGhBZGRpdGlvbmFsVGFnc31cclxuICAgICAgICAgIDwvQ29kZUJsb2NrPlxyXG4gICAgICAgICAgPENvZGVCbG9ja1xyXG4gICAgICAgICAgICBsYW5ndWFnZT1cInlhbWxcIlxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICB7YW5vdGhlclNhbXBsZX1cclxuICAgICAgICAgIDwvQ29kZUJsb2NrPlxyXG4gICAgICAgICAgPENvZGVCbG9jayBsYW5ndWFnZT1cInhtbFwiPnt4bWxTYW1wbGV9PC9Db2RlQmxvY2s+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIDxzZWN0aW9uPlxyXG4gICAgICAgICAgPGgyPlRlcm1pbmFsPC9oMj5cclxuICAgICAgICAgIDxUZXJtaW5hbD5jZCBwYWNrYWdlcy9nYXRzYnktdGhlbWUtbmV3cmVsaWM8L1Rlcm1pbmFsPlxyXG5cclxuICAgICAgICAgIDxoMj5BbmltYXRlZCB0ZXJtaW5hbDwvaDI+XHJcbiAgICAgICAgICA8VGVybWluYWwgYW5pbWF0ZT5cclxuICAgICAgICAgICAge2BcclxubnIxIGNyZWF0ZSAtLXR5cGUgbmVyZHBhY2sgLS1uYW1lIHBhZ2V2aWV3cy1hcHBcclxuW291dHB1dF0ge3N1Y2Nlc3N94pyUICB7cGxhaW59Q29tcG9uZW50IGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5IVxyXG5bb3V0cHV0XSAgICB7cHVycGxlfW5lcmRwYWNrIHtibHVlfXBhZ2V2aWV3cy1hcHAge3BsYWlufWlzIGF2YWlsYWJsZSBhdCB7Z3JlZW59XCIuL3BhZ2V2aWV3cy1hcHBcIlxyXG4gICAgICAgICAgICBgfVxyXG4gICAgICAgICAgPC9UZXJtaW5hbD5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPHNlY3Rpb24+XHJcbiAgICAgICAgICA8aDI+QnV0dG9uczwvaDI+XHJcbiAgICAgICAgICA8aDM+VmFyaWFudHM8L2gzPlxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgICAgICAgICAgICBnYXA6IDFyZW07XHJcbiAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcclxuICAgICAgICAgICAgICBhbGlnbi1pdGVtczogc3RhcnQ7XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBhbGVydCgnSGVsbG8hJyl9XHJcbiAgICAgICAgICAgICAgdmFyaWFudD17QnV0dG9uLlZBUklBTlQuUFJJTUFSWX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIFByaW1hcnlcclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBhbGVydCgnSGVsbG8hJyl9XHJcbiAgICAgICAgICAgICAgdmFyaWFudD17QnV0dG9uLlZBUklBTlQuTk9STUFMfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgTm9ybWFsXHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gYWxlcnQoJ0hlbGxvIScpfVxyXG4gICAgICAgICAgICAgIHZhcmlhbnQ9e0J1dHRvbi5WQVJJQU5ULk9VVExJTkV9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBPdXRsaW5lXHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gYWxlcnQoJ0hlbGxvIScpfVxyXG4gICAgICAgICAgICAgIHZhcmlhbnQ9e0J1dHRvbi5WQVJJQU5ULkxJTkt9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBMaW5rXHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8aDM+U2l6ZXM8L2gzPlxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xyXG4gICAgICAgICAgICAgIGdhcDogMXJlbTtcclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGFsZXJ0KCdIZWxsbyEnKX1cclxuICAgICAgICAgICAgICB2YXJpYW50PXtCdXR0b24uVkFSSUFOVC5QUklNQVJZfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgRGVmYXVsdFxyXG4gICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGFsZXJ0KCdIZWxsbyEnKX1cclxuICAgICAgICAgICAgICB2YXJpYW50PXtCdXR0b24uVkFSSUFOVC5QUklNQVJZfVxyXG4gICAgICAgICAgICAgIHNpemU9e0J1dHRvbi5TSVpFLlNNQUxMfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgU21hbGxcclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBhbGVydCgnSGVsbG8hJyl9XHJcbiAgICAgICAgICAgICAgdmFyaWFudD17QnV0dG9uLlZBUklBTlQuUFJJTUFSWX1cclxuICAgICAgICAgICAgICBzaXplPXtCdXR0b24uU0laRS5FWFRSQV9TTUFMTH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIEV4dHJhIHNtYWxsXHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIDxzZWN0aW9uPlxyXG4gICAgICAgICAgPFJlbGF0ZWRSZXNvdXJjZXNcclxuICAgICAgICAgICAgcmVzb3VyY2VzPXtbXHJcbiAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly9uZXdyZWxpYy5jb20vaW5zdGFudC1vYnNlcnZhYmlsaXR5LycsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ2RldmVsb3BlcicsXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIDxzZWN0aW9uPlxyXG4gICAgICAgICAgPGgyPlByaW1hcnkgc3VyZmFjZXM8L2gyPlxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LCBtaW5tYXgoMTAwcHgsIDFmcikpO1xyXG4gICAgICAgICAgICAgIGdyaWQtZ2FwOiAycmVtO1xyXG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxTdXJmYWNlXHJcbiAgICAgICAgICAgICAgYmFzZT17U3VyZmFjZS5CQVNFLlBSSU1BUll9XHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBOb24taW50ZXJhY3RpdmVcclxuICAgICAgICAgICAgPC9TdXJmYWNlPlxyXG4gICAgICAgICAgICA8U3VyZmFjZVxyXG4gICAgICAgICAgICAgIGludGVyYWN0aXZlXHJcbiAgICAgICAgICAgICAgYmFzZT17U3VyZmFjZS5CQVNFLlBSSU1BUll9XHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBJbnRlcmFjdGl2ZVxyXG4gICAgICAgICAgICA8L1N1cmZhY2U+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxoMj5TZWNvbmRhcnkgc3VyZmFjZXM8L2gyPlxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LCBtaW5tYXgoMTAwcHgsIDFmcikpO1xyXG4gICAgICAgICAgICAgIGdyaWQtZ2FwOiAycmVtO1xyXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yKTtcclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPFN1cmZhY2VcclxuICAgICAgICAgICAgICBiYXNlPXtTdXJmYWNlLkJBU0UuU0VDT05EQVJZfVxyXG4gICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMnJlbTtcclxuICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgTm9uLWludGVyYWN0aXZlXHJcbiAgICAgICAgICAgIDwvU3VyZmFjZT5cclxuICAgICAgICAgICAgPFN1cmZhY2VcclxuICAgICAgICAgICAgICBpbnRlcmFjdGl2ZVxyXG4gICAgICAgICAgICAgIGJhc2U9e1N1cmZhY2UuQkFTRS5TRUNPTkRBUll9XHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBJbnRlcmFjdGl2ZVxyXG4gICAgICAgICAgICA8L1N1cmZhY2U+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxoMj5TdXJmYWNlcyBhcyBvdGhlciBlbGVtZW50czwvaDI+XHJcbiAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCgxMDBweCwgMWZyKSk7XHJcbiAgICAgICAgICAgICAgZ3JpZC1nYXA6IDJyZW07XHJcbiAgICAgICAgICAgICAgcGFkZGluZzogMXJlbTtcclxuICAgICAgICAgICAgYH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPFN1cmZhY2VcclxuICAgICAgICAgICAgICBiYXNlPXtTdXJmYWNlLkJBU0UuUFJJTUFSWX1cclxuICAgICAgICAgICAgICB0bz1cImZvb2JhclwiXHJcbiAgICAgICAgICAgICAgYXM9e0xpbmt9XHJcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBJJ20gYSBsaW5rIVxyXG4gICAgICAgICAgICA8L1N1cmZhY2U+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPHNlY3Rpb24+XHJcbiAgICAgICAgICA8aDI+V2lzdGlhIHZpZGVvPC9oMj5cclxuICAgICAgICAgIDxWaWRlbyBpZD1cImlueXNocDNtN3JcIiB0eXBlPXtWaWRlby5UWVBFLldJU1RJQX0gd2lkdGg9XCI1MDBweFwiIC8+XHJcbiAgICAgICAgICA8aDI+WW91VHViZSB2aWRlbzwvaDI+XHJcbiAgICAgICAgICA8VmlkZW8gaWQ9XCJaYWdaZk5RWUpFVVwiIHR5cGU9e1ZpZGVvLlRZUEUuWU9VVFVCRX0gd2lkdGg9XCI1MDBweFwiIC8+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIDxzZWN0aW9uPlxyXG4gICAgICAgICAgPGgyPkludGVybmFsIExpbmtzPC9oMj5cclxuICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICBUaGlzIDxMaW5rIHRvPVwiL2J1aWxkLWFwcHNcIj5JbnRlcm5hbCBMaW5rPC9MaW5rPiBhdXRvbWF0aWNhbGx5IHVzZXNcclxuICAgICAgICAgICAgbG9jYWxpemVkIHBhdGggaWYgb24gdHJhbnNsYXRlZCBzaXRlLlxyXG4gICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgIFRoaXN7JyAnfVxyXG4gICAgICAgICAgICA8TGluayB0bz1cIi9idWlsZC1hcHBzXCIgc2hvdWxkQXV0b0xvY2FsaXplPXtmYWxzZX0+XHJcbiAgICAgICAgICAgICAgSW50ZXJuYWwgTGlua1xyXG4gICAgICAgICAgICA8L0xpbms+eycgJ31cclxuICAgICAgICAgICAgZG9lcyBub3QgYXV0b21hdGljYWxseSB1c2UgbG9jYWxpemVkIHBhdGggaWYgb24gdHJhbnNsYXRlZCBzaXRlLlxyXG4gICAgICAgICAgPC9wPlxyXG4gICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgICA8c2VjdGlvbj5cclxuICAgICAgICAgIDxoMj5FeHRlcm5hbCBMaW5rczwvaDI+XHJcbiAgICAgICAgICA8U3VyZmFjZVxyXG4gICAgICAgICAgICBiYXNlPXtTdXJmYWNlLkJBU0UuUFJJTUFSWX1cclxuICAgICAgICAgICAgdG89XCJodHRwczovL25ld3JlbGljLmNvbVwiXHJcbiAgICAgICAgICAgIGFzPXtMaW5rfVxyXG4gICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICBwYWRkaW5nOiA1cHg7XHJcbiAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgIGRpc3BsYXlFeHRlcm5hbEljb25cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgU3VyZmFjZVxyXG4gICAgICAgICAgPC9TdXJmYWNlPlxyXG4gICAgICAgICAgPEJ1dHRvbiBhcz17TGlua30gZGlzcGxheUV4dGVybmFsSWNvbiB0bz1cImh0dHBzOi8vbmV3cmVsaWMuY29tXCI+XHJcbiAgICAgICAgICAgIEJ1dHRvblxyXG4gICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICA8RXh0ZXJuYWxMaW5rIHRvPVwiaHR0cHM6Ly9uZXdyZWxpYy5jb21cIiBkaXNwbGF5RXh0ZXJuYWxJY29uPlxyXG4gICAgICAgICAgICBFeHRlcm5hbCBMaW5rXHJcbiAgICAgICAgICA8L0V4dGVybmFsTGluaz5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPHNlY3Rpb24+XHJcbiAgICAgICAgICA8aDI+VGFibGVzPC9oMj5cclxuICAgICAgICAgIDxUYWJsZT5cclxuICAgICAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgIDx0ZD5Db2wgMTwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQ+Q29sIDI8L3RkPlxyXG4gICAgICAgICAgICAgICAgPHRkPkNvbCAzPC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZD5Db2wgNDwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQ+Q29sIDU8L3RkPlxyXG4gICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICB7QXJyYXkuZnJvbSh7IGxlbmd0aDogMTAgfSwgKF8sIGkpID0+IGkgKyAxKS5tYXAoKG51bSkgPT4gKFxyXG4gICAgICAgICAgICAgICAgPHRyIGtleT17bnVtfT5cclxuICAgICAgICAgICAgICAgICAgPHRkPlJvdyB7bnVtfSAtIENvbHVtbiAxPC90ZD5cclxuICAgICAgICAgICAgICAgICAgPHRkPlJvdyB7bnVtfSAtIENvbHVtbiAyPC90ZD5cclxuICAgICAgICAgICAgICAgICAgPHRkPlJvdyB7bnVtfSAtIENvbHVtbiAzPC90ZD5cclxuICAgICAgICAgICAgICAgICAgPHRkPlJvdyB7bnVtfSAtIENvbHVtbiA0PC90ZD5cclxuICAgICAgICAgICAgICAgICAgPHRkPlJvdyB7bnVtfSAtIENvbHVtbiA1PC90ZD5cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICA8L1RhYmxlPlxyXG4gICAgICAgIDwvc2VjdGlvbj5cclxuXHJcbiAgICAgICAgPHNlY3Rpb24+XHJcbiAgICAgICAgICA8VGFnTGlzdD5cclxuICAgICAgICAgICAgPFRhZz5SZWFjdDwvVGFnPlxyXG4gICAgICAgICAgICA8VGFnIGludGVyYWN0aXZlPkFnZW50PC9UYWc+XHJcbiAgICAgICAgICA8L1RhZ0xpc3Q+XHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICA8L0xheW91dC5Db250ZW50PlxyXG4gICAgICA8TGF5b3V0LlBhZ2VUb29sc1xyXG4gICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTI4MHB4KSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgYH1cclxuICAgICAgPlxyXG4gICAgICAgIDxTaW1wbGVGZWVkYmFjayBwYWdlVGl0bGU9XCJEZW1vIFNpdGVcIiAvPlxyXG4gICAgICAgIDxDb250cmlidXRpbmdHdWlkZWxpbmVzIGZpbGVSZWxhdGl2ZVBhdGg9XCJkZW1vL3NyYy9wYWdlcy9pbmRleC5qc1wiIC8+XHJcbiAgICAgICAgPFBhZ2VUb29scy5TZWN0aW9uPlxyXG4gICAgICAgICAgPFBhZ2VUb29scy5UaXRsZT5Ib3cgdG8gdXNlPC9QYWdlVG9vbHMuVGl0bGU+XHJcbiAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgVGhlIDxjb2RlPlBhZ2VUb29sczwvY29kZT4gY29tcG9uZW50IGlzIGdyZWF0IGZvciB1c2UgYXMgYSBzaWRlYmFyXHJcbiAgICAgICAgICAgIHRvIGdpdmUgcGFnZS1zcGVjaWZpYyBjb250ZXh0IHRvIGEgdXNlclxyXG4gICAgICAgICAgPC9wPlxyXG4gICAgICAgIDwvUGFnZVRvb2xzLlNlY3Rpb24+XHJcbiAgICAgIDwvTGF5b3V0LlBhZ2VUb29scz5cclxuICAgIDwvTGF5b3V0Lk1haW4+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEluZGV4UGFnZTtcclxuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref16 =  false ? 0 : {
  name: "1njmmdg-IndexPage",
  styles: "margin-bottom:2rem;label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref17 =  false ? 0 : {
  name: "l9hg8p-IndexPage",
  styles: "section{margin-bottom:4rem;};label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref18 =  false ? 0 : {
  name: "1yzfwnn-IndexPage",
  styles: "display:grid;grid-template-columns:minmax(0, 1fr) 320px;grid-template-areas:'content page-tools';grid-gap:var(--site-content-padding);@media screen and (max-width: 1280px){grid-template-columns:minmax(0, 1fr);grid-template-areas:content;};label:IndexPage;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

const IndexPage = () => {
  const {
    t
  } = (0,_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();
  const {
    0: searchTerm,
    1: setSearchTerm
  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  return (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Layout.Main, {
    css: _ref18
  }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Layout.Content, {
    css: _ref17
  }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h1", null, t('home.welcome')), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", null, t('home.intro')), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("section", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "Search inputs"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.SearchInput, {
    style: {
      margin: '1rem 0',
      maxWidth: '500px'
    },
    placeholder: "Test out a small search",
    onClear: () => setSearchTerm(''),
    onChange: e => setSearchTerm(e.target.value),
    value: searchTerm,
    size: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.SearchInput.SIZE.SMALL
  }), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.SearchInput, {
    style: {
      margin: '1rem 0',
      maxWidth: '500px'
    },
    placeholder: "Test out a medium search",
    onClear: () => setSearchTerm(''),
    onChange: e => setSearchTerm(e.target.value),
    value: searchTerm
  }), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.SearchInput, {
    style: {
      marginBottom: '1rem',
      maxWidth: '500px'
    },
    placeholder: "Test out a large search",
    onClear: () => setSearchTerm(''),
    onChange: e => setSearchTerm(e.target.value),
    value: searchTerm,
    size: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.SearchInput.SIZE.LARGE
  })), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("section", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "Collapsers"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.CollapserGroup, null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Collapser, {
    id: "example-1",
    title: "Check out this cool collapser"
  }, "This is a pretty neat little utility. I can show all kinds of stuff in here."), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Collapser, {
    title: (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("code", null, "api_doc")
  }, "You can even use JSX in the title"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Collapser, {
    title: "This one is open by default",
    defaultOpen: true
  }, "And you can see everything inside of it!"))), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("section", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Callout, {
    variant: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Callout.VARIANT.CAUTION
  }, "Danger! Exercise extreme caution."), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Callout, {
    variant: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Callout.VARIANT.IMPORTANT
  }, "Important! I said, this is important."), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Callout, {
    variant: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Callout.VARIANT.TIP
  }, "Here's a tip."), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Callout, {
    variant: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Callout.VARIANT.TIP,
    title: "Hello"
  }, "Here's a tip with a custom title"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Callout, {
    variant: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Callout.VARIANT.TIP,
    title: null
  }, "Here's a tip with no title"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Callout, {
    variant: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Callout.VARIANT.COURSE
  }, "This callout is for a guide that is part of a super cool course")), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("section", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "A code block"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.CodeBlock, {
    copyable: true,
    lineNumbers: true,
    highlightedLines: "5-7,11",
    fileName: "src/components/Button.js",
    language: "jsx",
    css: _ref16
  }, codeSample), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "A live editable code block w/ preview"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.CodeBlock, {
    copyable: true,
    lineNumbers: true,
    live: true,
    preview: true,
    fileName: "src/components/Button.js",
    language: "jsx",
    scope: {
      Button: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button
    },
    css: _ref15
  }, liveCodeSample), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "Code block w/ embedded var/mark/links"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.CodeBlock, {
    language: "graphql",
    css: _ref14
  }, codeSampleWithAdditionalTags), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.CodeBlock, {
    language: "yaml",
    css: _ref13
  }, anotherSample), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.CodeBlock, {
    language: "xml"
  }, xmlSample)), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("section", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "Terminal"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Terminal, null, "cd packages/gatsby-theme-newrelic"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "Animated terminal"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Terminal, {
    animate: true
  }, `
nr1 create --type nerdpack --name pageviews-app
[output] {success}✔  {plain}Component created successfully!
[output]    {purple}nerdpack {blue}pageviews-app {plain}is available at {green}"./pageviews-app"
            `)), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("section", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "Buttons"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h3", null, "Variants"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
    css: _ref12
  }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button, {
    onClick: () => alert('Hello!'),
    variant: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button.VARIANT.PRIMARY
  }, "Primary"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button, {
    onClick: () => alert('Hello!'),
    variant: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button.VARIANT.NORMAL
  }, "Normal"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button, {
    onClick: () => alert('Hello!'),
    variant: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button.VARIANT.OUTLINE
  }, "Outline"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button, {
    onClick: () => alert('Hello!'),
    variant: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button.VARIANT.LINK
  }, "Link")), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h3", null, "Sizes"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
    css: _ref11
  }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button, {
    onClick: () => alert('Hello!'),
    variant: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button.VARIANT.PRIMARY
  }, "Default"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button, {
    onClick: () => alert('Hello!'),
    variant: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button.VARIANT.PRIMARY,
    size: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button.SIZE.SMALL
  }, "Small"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button, {
    onClick: () => alert('Hello!'),
    variant: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button.VARIANT.PRIMARY,
    size: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button.SIZE.EXTRA_SMALL
  }, "Extra small"))), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("section", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.RelatedResources, {
    resources: [{
      url: 'https://newrelic.com/instant-observability/',
      title: 'developer'
    }]
  })), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("section", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "Primary surfaces"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
    css: _ref10
  }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Surface, {
    base: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Surface.BASE.PRIMARY,
    css: _ref9
  }, "Non-interactive"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Surface, {
    interactive: true,
    base: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Surface.BASE.PRIMARY,
    css: _ref8
  }, "Interactive")), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "Secondary surfaces"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
    css: _ref7
  }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Surface, {
    base: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Surface.BASE.SECONDARY,
    css: _ref6
  }, "Non-interactive"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Surface, {
    interactive: true,
    base: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Surface.BASE.SECONDARY,
    css: _ref5
  }, "Interactive")), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "Surfaces as other elements"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
    css: _ref4
  }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Surface, {
    base: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Surface.BASE.PRIMARY,
    to: "foobar",
    as: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Link,
    css: _ref3
  }, "I'm a link!"))), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("section", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "Wistia video"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Video, {
    id: "inyshp3m7r",
    type: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Video.TYPE.WISTIA,
    width: "500px"
  }), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "YouTube video"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Video, {
    id: "ZagZfNQYJEU",
    type: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Video.TYPE.YOUTUBE,
    width: "500px"
  })), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("section", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "Internal Links"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", null, "This ", (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Link, {
    to: "/build-apps"
  }, "Internal Link"), " automatically uses localized path if on translated site."), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", null, "This", ' ', (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Link, {
    to: "/build-apps",
    shouldAutoLocalize: false
  }, "Internal Link"), ' ', "does not automatically use localized path if on translated site.")), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("section", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "External Links"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Surface, {
    base: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Surface.BASE.PRIMARY,
    to: "https://newrelic.com",
    as: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Link,
    css: _ref2,
    displayExternalIcon: true
  }, "Surface"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Button, {
    as: _newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Link,
    displayExternalIcon: true,
    to: "https://newrelic.com"
  }, "Button"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.ExternalLink, {
    to: "https://newrelic.com",
    displayExternalIcon: true
  }, "External Link")), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("section", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", null, "Tables"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Table, null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("thead", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("tr", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("td", null, "Col 1"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("td", null, "Col 2"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("td", null, "Col 3"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("td", null, "Col 4"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("td", null, "Col 5"))), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("tbody", null, Array.from({
    length: 10
  }, (_, i) => i + 1).map(num => (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("tr", {
    key: num
  }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("td", null, "Row ", num, " - Column 1"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("td", null, "Row ", num, " - Column 2"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("td", null, "Row ", num, " - Column 3"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("td", null, "Row ", num, " - Column 4"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("td", null, "Row ", num, " - Column 5")))))), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("section", null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.TagList, null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Tag, null, "React"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Tag, {
    interactive: true
  }, "Agent")))), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.Layout.PageTools, {
    css: _ref
  }, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.SimpleFeedback, {
    pageTitle: "Demo Site"
  }), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.ContributingGuidelines, {
    fileRelativePath: "demo/src/pages/index.js"
  }), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.PageTools.Section, null, (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)(_newrelic_gatsby_theme_newrelic__WEBPACK_IMPORTED_MODULE_1__.PageTools.Title, null, "How to use"), (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("p", null, "The ", (0,_emotion_react__WEBPACK_IMPORTED_MODULE_2__.jsx)("code", null, "PageTools"), " component is great for use as a sidebar to give page-specific context to a user"))));
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (IndexPage);

/***/ })

};
;
//# sourceMappingURL=component---src-pages-index-js.js.map