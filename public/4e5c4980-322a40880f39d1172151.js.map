{"version":3,"file":"4e5c4980-322a40880f39d1172151.js","mappings":"+gDAQMA,GAAQC,EAAAA,EAAAA,aACZ,WAcEC,GACI,IAbFC,EAaC,EAbDA,QACAC,EAYC,EAZDA,SACAC,EAWC,EAXDA,SACAC,EAUC,EAVDA,QACAC,EASC,EATDA,MACAC,EAQC,EARDA,MACAC,EAOC,EAPDA,UACAC,EAMC,EANDA,MACAC,EAKC,EALDA,QACAC,EAIC,EAJDA,SACGC,GAGF,YACH,OACE,eACEL,MAAOA,EACPC,UAAWA,EACXC,MAAOA,EACPI,IAAG,IAWH,QAAC,IAAD,CACEA,IAAG,EAWHC,KAAK,YACLC,KAAK,YAEP,yBACEd,IAAKA,EACLK,MAAOA,GACHM,EAHN,CAIEI,KAAK,OACLC,UAAW,SAACC,GACV,OAAQA,EAAEC,KACR,IAAK,QACH,OAAOhB,MAAAA,OAAP,EAAOA,EAAWG,GACpB,IAAK,UACL,IAAK,YACHY,EAAEE,mBAMRP,IAAG,KAsBJH,IACC,QAAC,IAAD,CACEW,QAAM,EACNN,KAAK,UACLF,IAAG,IAQNP,GAASJ,IAAYQ,IACpB,eACEG,IAAG,IASH,kBACES,QAAS,SAACJ,GACRA,EAAEE,iBACFlB,KAEFW,IAAG,EAaHG,KAAK,WAEL,QAAC,IAAD,CACEF,KAAK,OACLD,IAAG,EAGHE,KAAK,aAGRV,IACC,QAAC,IAAD,CAAUkB,MAAM,QAAQC,cAAc,IACpC,QAAC,WAAD,CACEX,KAAKA,EAAAA,EAAAA,IAAF,8HAQCR,MAAAA,OAAA,EAAAA,EAASoB,MAAK,SAACC,GAAD,OAAkC,IAAtBA,EAAOC,gBAAjC,8LARD,gCAoBHC,SAAS,EACTC,QAASC,EAAAA,EAAAA,QAAAA,QAET,QAAC,IAAD,CACEhB,KAAK,YACLD,IAAG,EAGHE,KAAK,WAGT,QAAC,SAAD,KACGV,EAAQ0B,KAAI,SAACL,GACZ,OACE,QAAC,aAAD,CACEP,IAAKO,EAAOZ,KACZQ,QAAS,kBAAMlB,EAASsB,EAAOZ,OAC/BD,KAAKA,EAAAA,EAAAA,IAAF,yBAECa,EAAOC,YAAP,kVAFD,UAaH,eACEd,KAAKA,EAAAA,EAAAA,IAAF,sFAKCa,EAAOC,YAAP,GALD,UAQH,eACEd,IAAG,GAKFa,EAAOZ,KAAKkB,QAAQ,IAAK,OAE5B,eACEnB,KAAKA,EAAAA,EAAAA,IACDa,EAAOC,WAAP,ydADD,UAgBH,QAAC,IAAD,CAAMZ,KAAK,WAAWD,KAAK,sBAS3C,QAAC,IAAD,CACEe,QAASC,EAAAA,EAAAA,QAAAA,MACTf,KAAMe,EAAAA,EAAAA,KAAAA,YACNR,QAASX,GAHX,eA4BZ","sources":["webpack://demo/../packages/gatsby-theme-newrelic/src/components/SearchModal/Input.js"],"sourcesContent":["import React, { forwardRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { css } from '@emotion/react';\r\nimport Button from '../Button';\r\nimport Icon from '../Icon';\r\nimport Spinner from '../Spinner';\r\nimport Dropdown from '../Dropdown';\r\n\r\nconst Input = forwardRef(\r\n  (\r\n    {\r\n      onClear,\r\n      onSubmit,\r\n      onFilter,\r\n      filters,\r\n      value,\r\n      width,\r\n      className,\r\n      style,\r\n      loading,\r\n      onCancel,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    return (\r\n      <div\r\n        width={width}\r\n        className={className}\r\n        style={style}\r\n        css={css`\r\n          --icon-size: 1.5rem;\r\n\r\n          position: relative;\r\n          width: 100%;\r\n\r\n          .dark-mode & {\r\n            --icon-color: var(--color-dark-500);\r\n          }\r\n        `}\r\n      >\r\n        <Icon\r\n          css={css`\r\n            color: var(--color-neutrals-400);\r\n            position: absolute;\r\n            left: var(--horizontal-spacing);\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n\r\n            .dark-mode & {\r\n              color: var(--color-dark-400);\r\n            }\r\n          `}\r\n          name=\"fe-search\"\r\n          size=\"1.5rem\"\r\n        />\r\n        <input\r\n          ref={ref}\r\n          value={value}\r\n          {...props}\r\n          type=\"text\"\r\n          onKeyDown={(e) => {\r\n            switch (e.key) {\r\n              case 'Enter':\r\n                return onSubmit?.(value);\r\n              case 'ArrowUp':\r\n              case 'ArrowDown':\r\n                e.preventDefault();\r\n                break;\r\n              default:\r\n              // do nothing\r\n            }\r\n          }}\r\n          css={css`\r\n            width: 100%;\r\n            border: 1px solid var(--border-color);\r\n            border-radius: 4px;\r\n            color: var(--primary-text-color);\r\n            transition: 0.15s ease-out;\r\n            line-height: 1;\r\n            font-size: 1.25rem;\r\n            font-weight: 500;\r\n            padding: 1rem\r\n              calc(var(--horizontal-spacing) + 0.5rem + var(--icon-size));\r\n            padding-right: 7.5rem;\r\n\r\n            &:focus {\r\n              outline: none;\r\n            }\r\n\r\n            .dark-mode & {\r\n              background: var(--color-dark-050);\r\n            }\r\n          `}\r\n        />\r\n        {loading && (\r\n          <Spinner\r\n            inline\r\n            size=\"1.25rem\"\r\n            css={css`\r\n              position: absolute;\r\n              top: 50%;\r\n              right: var(--horizontal-spacing);\r\n              transform: translateY(-50%);\r\n            `}\r\n          />\r\n        )}\r\n        {value && onClear && !loading && (\r\n          <div\r\n            css={css`\r\n              display: flex;\r\n              align-items: center;\r\n              position: absolute;\r\n              right: var(--horizontal-spacing);\r\n              top: 50%;\r\n              transform: translateY(-50%);\r\n            `}\r\n          >\r\n            <button\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                onClear();\r\n              }}\r\n              css={css`\r\n                color: var(--accent-text-color);\r\n                border: none;\r\n                background: transparent;\r\n                margin: 0;\r\n                padding: 0;\r\n                outline: none;\r\n                margin-right: 1rem;\r\n\r\n                &:hover {\r\n                  cursor: pointer;\r\n                }\r\n              `}\r\n              type=\"button\"\r\n            >\r\n              <Icon\r\n                name=\"fe-x\"\r\n                css={css`\r\n                  display: block;\r\n                `}\r\n                size=\"1.25rem\"\r\n              />\r\n            </button>\r\n            {filters && (\r\n              <Dropdown align=\"right\" closeOnClick={false}>\r\n                <Dropdown.Toggle\r\n                  css={css`\r\n                    color: var(--accent-text-color);\r\n                    border: green;\r\n                    background: transparent;\r\n                    margin: 0;\r\n                    padding: 0.5rem;\r\n                    outline: none;\r\n                    margin-right: 1rem;\r\n                    ${filters?.find((filter) => filter.isSelected === true) &&\r\n                    `\r\n                    color: var(--color-brand-600);\r\n                    .dark-mode & {\r\n                      color: var(--color-brand-200);\r\n                    }\r\n                    `}\r\n\r\n                    &:hover {\r\n                      cursor: pointer;\r\n                    }\r\n                  `}\r\n                  chevron={false}\r\n                  variant={Button.VARIANT.PLAIN}\r\n                >\r\n                  <Icon\r\n                    name=\"fe-filter\"\r\n                    css={css`\r\n                      display: block;\r\n                    `}\r\n                    size=\"1rem\"\r\n                  />\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  {filters.map((filter) => {\r\n                    return (\r\n                      <Dropdown.MenuItem\r\n                        key={filter.name}\r\n                        onClick={() => onFilter(filter.name)}\r\n                        css={css`\r\n                          margin-bottom: 0.15rem;\r\n                          ${filter.isSelected &&\r\n                          `color: var(--text-color);\r\n                            cursor: pointer;\r\n                            background: var(--color-neutrals-200);\r\n                            border-radius: 0.25rem;\r\n\r\n                            .dark-mode & {\r\n                              background: var(--color-dark-200);\r\n                            }`}\r\n                        `}\r\n                      >\r\n                        <div\r\n                          css={css`\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: space-between;\r\n                            align-items: baseline;\r\n                            ${filter.isSelected && ``}\r\n                          `}\r\n                        >\r\n                          <div\r\n                            css={css`\r\n                              text-transform: uppercase;\r\n                              font-size: 0.625rem;\r\n                            `}\r\n                          >\r\n                            {filter.name.replace('_', ' ')}\r\n                          </div>\r\n                          <div\r\n                            css={css`\r\n                              ${filter.isSelected\r\n                                ? `animation-duration: 0.1s;\r\n                                animation-name: fadein;\r\n                                @keyframes fadein {\r\n                                  from {\r\n                                    opacity: 0;\r\n                                  }\r\n                                  to {\r\n                                    opacity: 1;\r\n                                  }\r\n                                }\r\n                              `\r\n                                : `opacity: 0;`}\r\n                            `}\r\n                          >\r\n                            <Icon size=\"0.625rem\" name=\"fe-check\" />\r\n                          </div>\r\n                        </div>\r\n                      </Dropdown.MenuItem>\r\n                    );\r\n                  })}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            )}\r\n            <Button\r\n              variant={Button.VARIANT.PLAIN}\r\n              size={Button.SIZE.EXTRA_SMALL}\r\n              onClick={onCancel}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nInput.propTypes = {\r\n  className: PropTypes.string,\r\n  filters: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  focusWithHotKey: PropTypes.string,\r\n  onClear: PropTypes.func,\r\n  onCancel: PropTypes.func,\r\n  onFilter: PropTypes.func,\r\n  onSubmit: PropTypes.func,\r\n  value: PropTypes.string,\r\n  width: PropTypes.string,\r\n  style: PropTypes.object,\r\n  loading: PropTypes.bool,\r\n};\r\n\r\nexport default Input;\r\n"],"names":["Input","forwardRef","ref","onClear","onSubmit","onFilter","filters","value","width","className","style","loading","onCancel","props","css","name","size","type","onKeyDown","e","key","preventDefault","inline","onClick","align","closeOnClick","find","filter","isSelected","chevron","variant","Button","map","replace"],"sourceRoot":""}