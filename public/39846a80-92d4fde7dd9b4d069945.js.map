{"version":3,"file":"39846a80-92d4fde7dd9b4d069945.js","mappings":"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","sources":["webpack://demo/../packages/gatsby-theme-newrelic/src/components/GlobalHeader.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { css } from '@emotion/react';\r\nimport { graphql, useStaticQuery, Link } from 'gatsby';\r\nimport AnnouncementBanner from './AnnouncementBanner';\r\nimport DarkModeToggle from './DarkModeToggle';\r\nimport ExternalLink from './ExternalLink';\r\nimport Button from './Button';\r\nimport Dropdown from './Dropdown';\r\nimport NewRelicLogo from './NewRelicLogo';\r\nimport Icon from './Icon';\r\nimport GlobalNavLink from './GlobalNavLink';\r\nimport SearchInput from './SearchInput';\r\nimport useMedia from 'use-media';\r\nimport { useLocation } from '@reach/router';\r\nimport useQueryParams from '../hooks/useQueryParams';\r\nimport useLocale from '../hooks/useLocale';\r\nimport useThemeTranslation from '../hooks/useThemeTranslation';\r\nimport path from 'path';\r\nimport { rgba } from 'polished';\r\nimport SearchModal from './SearchModal';\r\nimport { useDebounce } from 'react-use';\r\nimport useHasMounted from '../hooks/useHasMounted';\r\nimport useTessen from '../hooks/useTessen';\r\nimport SplitTextButton from './SplitTextButton';\r\nimport useInstrumentedHandler from '../hooks/useInstrumentedHandler';\r\n\r\nconst action = css`\r\n  color: var(--secondary-text-color);\r\n  transition: all 0.2s ease-out;\r\n\r\n  &:hover {\r\n    color: var(--secondary-text-hover-color);\r\n  }\r\n`;\r\n\r\nexport const NR_SITES = {\r\n  DOCS: 'DOCS',\r\n  DEVELOPER: 'DEVELOPER',\r\n  OSS: 'OSS',\r\n  COMMUNITY: 'COMMUNITY',\r\n  LEARN: 'LEARN',\r\n  IO: 'IO',\r\n};\r\n\r\nconst HEADER_LINKS = new Map();\r\n\r\nHEADER_LINKS.set(NR_SITES.DOCS, {\r\n  text: 'Docs',\r\n  href: 'https://docs.newrelic.com/',\r\n})\r\n  .set(NR_SITES.DEVELOPER, {\r\n    text: 'Developer',\r\n    href: 'https://developer.newrelic.com/',\r\n  })\r\n  .set(NR_SITES.OSS, {\r\n    text: 'Open Source',\r\n    href: 'https://opensource.newrelic.com/',\r\n  })\r\n  .set(NR_SITES.COMMUNITY, {\r\n    text: 'Community',\r\n    href: 'https://discuss.newrelic.com/',\r\n  })\r\n  .set(NR_SITES.LEARN, {\r\n    text: 'Learn',\r\n    href: 'https://learn.newrelic.com/',\r\n  })\r\n  .set(NR_SITES.IO, {\r\n    text: 'Instant Observability',\r\n    href: 'https://newrelic.com/instant-observability',\r\n  });\r\n\r\nconst createNavList = (listType, activeSite = null) => {\r\n  const navList = [];\r\n  HEADER_LINKS.forEach(({ text, href }) => {\r\n    switch (listType) {\r\n      case 'main':\r\n        navList.push(\r\n          <li key={href}>\r\n            <GlobalNavLink\r\n              href={href}\r\n              activeSite={activeSite && HEADER_LINKS.get(activeSite)}\r\n              instrumentation={{\r\n                component: 'globalHeader',\r\n                layoutElement: 'globalHeader',\r\n              }}\r\n            >\r\n              {text}\r\n            </GlobalNavLink>\r\n          </li>\r\n        );\r\n        break;\r\n      case 'dropdown':\r\n        navList.push(\r\n          <Dropdown.MenuItem key={href} href={href}>\r\n            {text}\r\n          </Dropdown.MenuItem>\r\n        );\r\n        break;\r\n    }\r\n  });\r\n  return navList;\r\n};\r\n\r\n// hides searchbar\r\nconst CONDENSED_BREAKPOINT = '815px';\r\n\r\n// swaps out logo into collapsable nav\r\nconst NAV_BREAKPOINT = '770px';\r\n\r\n// changes layout for mobile view\r\nconst MOBILE_BREAKPOINT = '600px';\r\n\r\nconst actionLink = css`\r\n  ${action};\r\n\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst actionIcon = css`\r\n  display: block;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst useSearchQuery = () => {\r\n  const { queryParams, setQueryParam } = useQueryParams();\r\n  const searchQueryParam = queryParams.get('q');\r\n  const [searchTerm, setSearchTerm] = useState(searchQueryParam);\r\n  const hasQParam = queryParams.has('q');\r\n  const tessen = useTessen();\r\n\r\n  useDebounce(\r\n    () => {\r\n      if (hasQParam) {\r\n        setQueryParam('q', searchTerm);\r\n        if (searchTerm && searchTerm.length > 2) {\r\n          tessen.track({\r\n            eventName: 'swiftypeSearchInput',\r\n            category: 'GlobalSearch',\r\n            name: 'searchInput',\r\n            layoutElement: 'globalHeader',\r\n            searchTerm,\r\n          });\r\n        }\r\n      }\r\n    },\r\n    400,\r\n    [searchTerm, setQueryParam, hasQParam]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setSearchTerm(searchQueryParam);\r\n  }, [searchQueryParam]);\r\n\r\n  return [searchTerm, setSearchTerm];\r\n};\r\n\r\nconst GlobalHeader = ({ className, activeSite }) => {\r\n  const hasMounted = useHasMounted();\r\n  const location = useLocation();\r\n  const { queryParams, setQueryParam, deleteQueryParam } = useQueryParams();\r\n  const [searchTerm, setSearchTerm] = useSearchQuery();\r\n  const { t } = useThemeTranslation();\r\n\r\n  const {\r\n    allLocale: { nodes: locales },\r\n  } = useStaticQuery(graphql`\r\n    query GlobalHeaderQuery {\r\n      allLocale(sort: { fields: [isDefault, locale], order: [DESC, ASC] }) {\r\n        nodes {\r\n          locale\r\n          localName\r\n          isDefault\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const hideLogoText = useMedia({ maxWidth: '350px' });\r\n\r\n  const matchLocalePath = new RegExp(\r\n    `^\\\\/(${locales.map(({ locale }) => locale).join('|')})`\r\n  );\r\n\r\n  const locale = useLocale();\r\n\r\n  const handleLocaleClick = useInstrumentedHandler(null, ({ locale }) => ({\r\n    eventName: 'localeDropDownClick',\r\n    category: 'LocaleDropDown',\r\n    origin: 'gatsbyTheme',\r\n    layoutElement: 'globalHeader',\r\n    locale,\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      <SearchModal\r\n        value={searchTerm}\r\n        onChange={(searchTerm) => setSearchTerm(searchTerm)}\r\n        onClose={() => {\r\n          deleteQueryParam('q');\r\n        }}\r\n        isOpen={hasMounted && queryParams.has('q')}\r\n      />\r\n      <AnnouncementBanner />\r\n      <div\r\n        data-swiftype-index={false}\r\n        className={className}\r\n        css={css`\r\n          background-color: var(--color-neutrals-800);\r\n          box-shadow: var(--shadow-2);\r\n          position: sticky;\r\n          top: 0;\r\n          z-index: 80;\r\n\r\n          .dark-mode & {\r\n            background-color: var(--color-dark-300);\r\n          }\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            height: var(--global-header-height);\r\n            display: flex;\r\n            justify-content: space-between;\r\n            max-width: var(--site-max-width);\r\n            margin: 0 auto;\r\n            padding: 0 var(--site-content-padding);\r\n          `}\r\n        >\r\n          <nav\r\n            css={css`\r\n              display: flex;\r\n              align-items: center;\r\n              height: 100%;\r\n              overflow: hidden;\r\n              position: relative;\r\n\r\n              @media screen and (max-width: 1235px) {\r\n                &::after {\r\n                  content: '';\r\n                  position: absolute;\r\n                  right: 0;\r\n                  height: 100%;\r\n                  width: 2rem;\r\n                  pointer-events: none;\r\n                  background: linear-gradient(\r\n                    to right,\r\n                    ${rgba('#f4f5f5', 0)},\r\n                    var(--color-neutrals-800)\r\n                  );\r\n\r\n                  .dark-mode & {\r\n                    background: linear-gradient(\r\n                      to right,\r\n                      ${rgba('#22353c', 0)},\r\n                      var(--color-dark-100)\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n\r\n              @media screen and (max-width: ${NAV_BREAKPOINT}) {\r\n                overflow: visible;\r\n\r\n                &::after {\r\n                  background: none !important;\r\n                  width: 0 !important;\r\n                }\r\n              }\r\n            `}\r\n          >\r\n            <ExternalLink\r\n              href=\"https://newrelic.com/\"\r\n              css={css`\r\n                display: flex;\r\n                align-items: center;\r\n                margin-right: 1rem;\r\n\r\n                @media screen and (max-width: ${NAV_BREAKPOINT}) {\r\n                  display: none;\r\n                }\r\n              `}\r\n              instrumentation={{\r\n                component: 'globalHeaderLogo',\r\n                layoutElement: 'globalHeader',\r\n              }}\r\n            >\r\n              <NewRelicLogo\r\n                size=\"104px\"\r\n                css={css`\r\n                  .logo-text {\r\n                    fill: var(--color-neutrals-050);\r\n                  }\r\n                `}\r\n              />\r\n            </ExternalLink>\r\n\r\n            <Dropdown\r\n              css={css`\r\n                display: none;\r\n\r\n                @media screen and (max-width: ${NAV_BREAKPOINT}) {\r\n                  display: block;\r\n                }\r\n              `}\r\n            >\r\n              <Dropdown.Toggle\r\n                size={Button.SIZE.EXTRA_SMALL}\r\n                variant={Button.VARIANT.LINK}\r\n                chevron={false}\r\n                css={css`\r\n                  padding-left: 0;\r\n                  padding-right: 0;\r\n                `}\r\n              >\r\n                <NewRelicLogo\r\n                  size={hideLogoText ? '24px' : '104px'}\r\n                  css={css`\r\n                    .logo-text {\r\n                      fill: var(--color-neutrals-050);\r\n                    }\r\n                  `}\r\n                  omitText={hideLogoText}\r\n                />\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                {createNavList('dropdown', activeSite)}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            <ul\r\n              css={css`\r\n                height: 100%;\r\n                margin: 0;\r\n                padding: 0;\r\n                display: flex;\r\n                list-style-type: none;\r\n                white-space: nowrap;\r\n                overflow-x: auto;\r\n                position: relative;\r\n                -webkit-overflow-scrolling: touch;\r\n                -ms-overflow-style: -ms-autohiding-scrollbar;\r\n\r\n                > li {\r\n                  margin: 0;\r\n                  flex: 0 0 auto;\r\n                }\r\n\r\n                @media screen and (max-width: ${NAV_BREAKPOINT}) {\r\n                  display: none;\r\n                }\r\n              `}\r\n            >\r\n              {createNavList('main', activeSite)}\r\n            </ul>\r\n          </nav>\r\n\r\n          <ul\r\n            css={css`\r\n              margin: 0;\r\n              margin-left: 1rem;\r\n              padding: 0;\r\n              display: flex;\r\n              list-style-type: none;\r\n              align-items: center;\r\n              flex: 1;\r\n\r\n              > li {\r\n                transition: all 0.2s ease-out;\r\n                color: var(--secondary-text-color);\r\n\r\n                &:not(:first-of-type) {\r\n                  margin-left: 0.5rem;\r\n                }\r\n              }\r\n\r\n              @media screen and (max-width: ${CONDENSED_BREAKPOINT}) {\r\n                flex: unset;\r\n              }\r\n            `}\r\n          >\r\n            <li\r\n              css={css`\r\n                flex: 1;\r\n                margin: 0rem 1rem;\r\n\r\n                @media screen and (max-width: ${CONDENSED_BREAKPOINT}) {\r\n                  flex: unset;\r\n                }\r\n              `}\r\n            >\r\n              <Link\r\n                to=\"?q=\"\r\n                css={css`\r\n                  ${actionLink}\r\n\r\n                  display: none;\r\n\r\n                  @media screen and (max-width: ${CONDENSED_BREAKPOINT}) {\r\n                    display: block;\r\n                  }\r\n                `}\r\n              >\r\n                <Icon css={actionIcon} name=\"fe-search\" size=\"1.5rem\" />\r\n              </Link>\r\n              <SearchInput\r\n                placeholder={t('searchInput.placeholder')}\r\n                size={SearchInput.SIZE.MEDIUM}\r\n                focusWithHotKey=\"/\"\r\n                css={css`\r\n                  --icon-size: 1.5rem;\r\n                  min-width: 150px;\r\n                  max-width: 350px;\r\n\r\n                  svg {\r\n                    color: var(--color-neutrals-500);\r\n                    width: 1.5rem;\r\n                    height: 1.5rem;\r\n                  }\r\n\r\n                  input {\r\n                    --hover-border-color: var(--color-neutrals-600);\r\n                    --background-color: var(--color-neutrals-700);\r\n                    background: var(--background-color);\r\n                    border: none;\r\n                    height: 40px;\r\n\r\n                    .dark-mode & {\r\n                      --background-color: var(--color-dark-500);\r\n                    }\r\n\r\n                    &:hover {\r\n                      box-shadow: 0 0 0 1px var(--color-neutrals-600);\r\n                    }\r\n                  }\r\n\r\n                  .search-hotkey {\r\n                    background: var(--color-neutrals-700);\r\n                    border-color: var(--color-neutrals-600);\r\n                    border-radius: 0.125rem;\r\n                    font-size: 0.875rem;\r\n                    padding: 0.125rem 0.375rem;\r\n\r\n                    .dark-mode & {\r\n                      background: var(--color-dark-500);\r\n                    }\r\n                  }\r\n\r\n                  @media screen and (max-width: ${CONDENSED_BREAKPOINT}) {\r\n                    display: none;\r\n                  }\r\n                `}\r\n                onFocus={() => {\r\n                  setQueryParam('q', '');\r\n                }}\r\n              />\r\n            </li>\r\n            {locales.length > 1 && (\r\n              <li\r\n                css={css`\r\n                  @media screen and (max-width: ${MOBILE_BREAKPOINT}) {\r\n                    display: none;\r\n                  }\r\n                `}\r\n              >\r\n                <Dropdown align=\"right\">\r\n                  <Dropdown.Toggle\r\n                    size={Button.SIZE.SMALL}\r\n                    variant={Button.VARIANT.LINK}\r\n                    css={css`\r\n                      --active-color: none;\r\n                      margin: 0;\r\n                      height: 72px;\r\n                      border-radius: 0px;\r\n                      font-size: 0.75rem;\r\n                      color: var(--color-neutrals-100);\r\n                      background: transparent;\r\n\r\n                      .dark-mode & {\r\n                        --active-color: var(--color-dark-100);\r\n                      }\r\n\r\n                      &:hover {\r\n                        color: var(--color-neutrals-600);\r\n                        background-color: var(--active-color);\r\n                      }\r\n                    `}\r\n                  >\r\n                    {locale.localName}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    {locales.map(({ isDefault, locale, localName }) => (\r\n                      <Dropdown.MenuItem\r\n                        as={Link}\r\n                        key={locale}\r\n                        href={path.join(\r\n                          isDefault ? '' : `/${locale}`,\r\n                          location.pathname.replace(matchLocalePath, '')\r\n                        )}\r\n                        onClick={() => handleLocaleClick({ locale })}\r\n                      >\r\n                        {localName}\r\n                      </Dropdown.MenuItem>\r\n                    ))}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </li>\r\n            )}\r\n            <li>\r\n              <DarkModeToggle\r\n                css={[\r\n                  actionIcon,\r\n                  action,\r\n                  css`\r\n                    margin: 0 24px;\r\n\r\n                    @media screen and (max-width: 450px) {\r\n                      margin: 0;\r\n                    }\r\n                  `,\r\n                ]}\r\n                size=\"1.5rem\"\r\n              />\r\n            </li>\r\n            <li\r\n              css={css`\r\n                display: flex;\r\n                align-items: right;\r\n              `}\r\n            >\r\n              <Button\r\n                as={ExternalLink}\r\n                size={Button.SIZE.SMALL}\r\n                variant={Button.VARIANT.LINK}\r\n                href=\"https://one.newrelic.com\"\r\n                css={css`\r\n                  margin: 0 0.625rem;\r\n                  font-weight: 600;\r\n                  font-size: 0.875rem;\r\n                  white-space: nowrap;\r\n                  color: var(--color-brand-400);\r\n                  border: 1px solid var(--color-brand-400);\r\n                  border-radius: 4px;\r\n\r\n                  @media screen and (max-width: ${MOBILE_BREAKPOINT}) {\r\n                    display: none;\r\n                  }\r\n                `}\r\n                instrumentation={{\r\n                  component: 'headerLogInButton',\r\n                  layoutElement: 'globalHeader',\r\n                }}\r\n              >\r\n                <span>{t('button.login')}</span>\r\n              </Button>\r\n            </li>\r\n            <li\r\n              css={css`\r\n                display: flex;\r\n              `}\r\n            >\r\n              <SplitTextButton\r\n                css={css`\r\n                  button {\r\n                    background: var(color-brand-500);\r\n                    border: 1px solid var(color-brand-500);\r\n                    border-radius: 4px;\r\n                  }\r\n                `}\r\n              />\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nGlobalHeader.propTypes = {\r\n  className: PropTypes.string,\r\n  activeSite: PropTypes.oneOf(Object.values(NR_SITES)),\r\n};\r\n\r\nexport default GlobalHeader;\r\n"],"names":["action","NR_SITES","HEADER_LINKS","Map","set","text","href","createNavList","listType","activeSite","navList","forEach","push","key","get","instrumentation","component","layoutElement","CONDENSED_BREAKPOINT","NAV_BREAKPOINT","MOBILE_BREAKPOINT","actionLink","css","actionIcon","className","hasMounted","useHasMounted","location","useLocation","useQueryParams","queryParams","setQueryParam","deleteQueryParam","searchQueryParam","useState","searchTerm","setSearchTerm","hasQParam","has","tessen","useTessen","useDebounce","length","track","eventName","category","name","useEffect","useSearchQuery","t","useThemeTranslation","locales","useStaticQuery","allLocale","nodes","hideLogoText","useMedia","maxWidth","matchLocalePath","RegExp","map","locale","join","useLocale","handleLocaleClick","useInstrumentedHandler","origin","value","onChange","onClose","isOpen","rgba","size","Button","variant","chevron","omitText","to","placeholder","SearchInput","focusWithHotKey","onFocus","align","localName","isDefault","as","Link","path","pathname","replace","onClick","ExternalLink"],"sourceRoot":""}